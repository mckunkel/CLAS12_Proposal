%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: Acr9302273219174425887.tmp.pdf
%%Creator: (Adobe Acrobat 11.0.15)
%%For: christophhanhart
%%CreationDate: 20.04.16, 14:44
%%BoundingBox: 0 0 492 111
%%HiResBoundingBox: 0 0 491.0911 110.4434
%%CropBox: 0 0 491.0911 110.4434
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 798 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2016-04-20T14:39:46+02:00"
   xmp:CreateDate="2016-04-20T14:39:46+02:00"
   xmp:MetadataDate="2016-04-20T14:39:46+02:00"
   xmp:CreatorTool="TeX"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:aab1744e-d149-bf4f-b2e2-ced6c8d0198f"
   xmpMM:InstanceID="uuid:143556e9-f036-9c43-a83e-ae079e76b1c0"
   pdf:Producer="pdfTeX-1.40.14"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -110.443 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 110.443 li
491.091 110.443 li
491.091 0 li
cp
clp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: SJERMX+CMR12 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /SJERMX+CMR12 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR12.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 12 /fi putdup 40 /parenleft putdup 41 /parenright putdup 44 /comma putdup 45 /hyphen putdup 46 /period putdup 49 /one putdup 50 /two putdup 52 /four putdup 59 /semicolon putdup 65 /A putdup 68 /D putdup 72 /H putdup 76 /L putdup 77 /M putdup 79 /O putdup 80 /P putdup 83 /S putdup 84 /T putdup 86 /V putdup 91 /bracketleft putdup 93 /bracketright putdup 97 /a putdup 98 /b putdup 99 /c putdup 100 /d putdup 101 /e putdup 102 /f putdup 103 /g putdup 104 /h putdup 105 /i putdup 107 /k putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 113 /q putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 118 /v putdup 119 /w putdup 120 /x putdup 121 /y putdef/UniqueID 5000794 def/FontBBox {-34 -251 988 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-21 0 431 446 665 675 683 704] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [29] def/StdVW [65] def/StemSnapH [20 29] def/StemSnapV [65 81] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings47 dict dup begin/fi <1C60D8A8C9B79C5F9DD058B925D920160DCEF4DBC92B1BBB5698061C5BAFC36A09EB46E7F7E4D1E8203089F2301D7B37FB93B0746C243E3589CF7FE7F3BC64CC053DB4E99D5409F2C3C2B2012B846FB8A4AEE3CB96761AB76965B0C275685B3000574D8808C38655F28659C728A4038EB08F54AA9833223B2C34434082DDC41F4DC2ED9A5BA3CA4D12A1572B3F52A533D46DAF16A9EE4EE5ABC4E462DF17562255B559BB6AFA38BBB32EEFBC114DAB9D301B80390A1DDAE9219737F0E7B8C6198CC71EE6C540B3412473954E91E9586ACA4D8B2D3C11247ED089119B0478B542CFD659A91A> |-/parenleft <1C60D8A8C9B73F59DC1736782E4C1C19EDD64255E2393C5024B28DF3DAD1F658B414FFC7F6340C09154655276EBE3A864FAA5F25254ADD1D66AD32F6F0ED72B2779D8B9CBC436F290A3FD41D2FEAF5BB166225967C60AC03264461C3B610DAE07B90E04CD1> |-/parenright <1C60D8A8C9B73F59DC1736782E4C1C19F750FC29D76AE903C84F39596182123C2F9BBABDCD183CD0A7F2DCF7F475747A3C66A218A2ACC3729267893607CC6D4EBAC9D3F2D1F9916BC173F64DE0D89D4D55EAF7634E8836B2C245A5674692FCF9DAC6CD845FC5E88E> |-/comma <1C60D8A8C9B85D12C7267AF0D2F66AB4AC257C1635F0E44214A585DB73B4A5021B7586C9A17E4BEB60731C6D7DA02A5C6E2DB1FBCEE64335DA64C8CBC4291E527F4444DDFE71E69CC854D1966A8E77591AE04236> |-/hyphen <1C60D8A8C9B82424A9C89C4F9B2EA301917DC41B2F6B065AA459E868BF5F> |-/period <1C60D8A8C9B85D12B760F96B699981ADCB57A7D673D446BE57B8C9BCADDF9A80034920FA8DD7ED00> |-/one <1C60D8A8C9B752AB372B1338726DAE50702AE3FC3505C230AA8B538E88A64BC50555C15C4F9C1C8D25ACFD4CFF046EBC17B6B6CE5B6DDF472F018C84C2D8CA302ED5402A29C0899E66EA3A4575040CA2E8AB00A92CB377A30E0A8E01C55A1866557B8C8E354DD627142F4AFBA8F01617> |-/two <1C60D8A8C9B752AB3751B7115F440B017A800C9966F9D6C8D899B69B535555547C6BA24B6E1F046DE16579F205857804134562B1E66D1B74F5C065BE4758EAA51BE86F23919207272A8508C865B8FC972FA5EECD6D618D03C944A0B51056C9A643AEE9E15B7819729DCB8546556AE1AA15DC7D1BB3C46B74A340814C1894F0D8820D897F> |-/four <1C60D8A8C9B752AB372B1337EF5EBE50E7EE0D842EC88506CC8578384EE51E179BB6AEA746475FEACAF798CD6C14693A1E8D3EE2FEF9BD6B47B43A2397A24D50A7F1ABF1FEE4596D279C197E1CE889DDEB64563C8AC2828DDDB10F3D4DE2B961879557873D221803B8BA674159AA7A2D6B96A7E476437ED08DA5B776BB24078F6888> |-/semicolon <1C60D8A8C9B85D12C7267AF0D2F66AB40D689F2DEDE683E3A988EA9032E2744C0E9FF95FB8BEB9E3F3F03830959249DE222627F012189094C8AAB19DFD36176F9BD1DCFEBDBA44372BC5D088E9BF8DD773D679401DC1C87F2D4AA766AC08C1BF7E7297DDB2> |-/A <1C60D8A8C9B613326598F7657C1643B36DF4E6D431FD668445BB11FE398088DEE5A41C4AFFA403F0B7993B417EB7B3B15FEBEFE16C348F00B50710577245EC5725E9F7A6AAD22231B018526DFA67DBA7FB9A721F767D3ACD10D72F32D53B38D4ABB201E09E6F027C714F91F99425AAFDD762AAF18CF265F105D8EFB608F6715CBA54F412965937F206A97D76A83E24CEECA3EF6DFFED913B8A8C5BAFEAC7265BC56D1F6D1BA43E0BCCDCBA7B1982A76772F66F244B6DC5AE7E4FE4D33217F407CABB06> |-/D <1C60D8A8C9B61E131A379F703B1B69D52D675B31593503FE296FE78E006BB74496A284F09149FB1BA58DCF764F92F39E1BAC4ED5422709960E05C205D3E4C474CC6C7A88D190491AA7E00E9CAF5C8E1134444BC7DCC2B3FF3811878EC8673471000FD154F644FDBC9BB368DCB570A96B04DDF32361575370> |-/H <1C60D8A8C9B613326598F765E87CA7F73A88B6B01EFBD284EE1D492D4E6FEBBBFFD4BD4659EC2849BCBE78FBCD84C756317C0517619513C71174725F34B4FDFD128324BC145A30F59A2333D4210BD9311158E339392D168176420EBD73AE5BF780F087E107E2A64F8046CC71D0BF9903C11120A7E3C189E893F9D45D290DDD6B18FED1D1794A2CA41B640D76668475B97EACB03CB90E0DE1CB1F188B439AB65B3FB947E42C8CD7E82FA7FFFFD4290B33A1061D0C58E4C6C38E1C6C96E4EA99AE3D4034D63F403585900946DBF1B5A0F450B7BEE5BD6BA7A1B469C5CB0D8A1E8991FE5ED77EB2BAF30A0F019C4B91D9E7C45C5397CED59E2039E6C8A174F365A0FB4286F0BFA8A26A35451D387A51C1F836CA8D6CA61EEAEC87E082D58402727E> |-/L <1C60D8A8C9B7D8BE6A7720908CD7975F30A0327FB3669E6EA89B3C5E3BAFC4543361DAB5C1C251CE6CB6FBBA59126CBE315D30C095400B410A8307AAD749A1BBBCDB062758BBB170F051FD5309EAA2E140A8056FD28DF145BC5B079B56EBFBD61C05DB0307B9F9A303BCA5CDA6F1A73EFA4CEED8AD50DA93> |-/M <1C60D8A8C9B587231BD32234B47CD93235012A3BC068156B00A427D15147D2FC8687F1C722E8AF7AC72352344B0D2F3D705331D743CEF59C9589B1F1834C3EE8695FCBF0B85371F3D9E8190A24C0B65C17398947726A3B3F278E22E78417C9E1CD5FD816C01FEAF0C445A0496A51D320B44FC54AA0581C256AA34DB4DEB9BE0358796FAF238FAAAE407073A35D34018AAFFB327A94ED4E80FB2A40E4DD506CB1EBF7A05DD0796298B3B3A07104FCFEF148517B1A71A0DDB1D0223A5D087BC6DAA49BDB007CB6C7A8A3A3B9E4FE04DEFB73CE63157CB310DC1A7DB9D1205058> |-/O <1C60D8A8C9B6EC341B8CD4B367E669615A6CBC57290754BD982CB5B55218FC540EE7C13973F8FDDA1EB2C3B437041BF839CE327FF47D87C96D727F4916EE6096252655BD3390FE62D8BD4F3103B06AB249CAE0B1B25A25C6655B0A98D3307BCBED8D2D> |-/P <1C60D8A8C9B64FADC67A3B29C41FF526FE61435F7AF161F2BEF1560931F99F39BD10D18D7668A3C13BC69BF258FAF1C08BCC6473E419DA4AC9449221BC1F6365A57A3D50A28BA5C6E35259A424E77EA995743B8E5E679CD43DFAF3929282E56D9E229B29F1FBB01986DDB5091773806A00982D9DCC86EA6913EF44DE15B837FE2183A8C81C7F23CB9E0E0BEB14C50B2A5ED353DA14AECF> |-/S <1C60D8A8C9B79C5F60E074FC484CE30A747880B5044B7D08F15D2D72D687D666DA0E65CB5A3BFE0BA26E32D9FD8192E0FAA98FE55C845729DFF9F526267BE8F9F2B7A9ACEA81814A9137C11214BF27EB0F271EF6260AAA5DFAFCF249D04D4EACED86E5B9EF95963F1229988F8D2D50A7E56937D20EDBB65B7F8004DC74366B6BE3759AFF224B2CEA96C906AF65F142304DC32938F019F70AB88E3C052B1722EF7690AF238743BCE85F33B8D27EC937C8DE80D8F709D47FCEA861F85383CA11FAFA862CC2EAC3EF7B16FE> |-/T <1C60D8A8C9B636759BD93531AB0B3EF3EFDA8DE57E25CF2BD120D247F052CB5532AD3820C7277E685BF514860F5CDF32B2BD61E2A2E2C448F17D6A1DCFD2A3FFC51C643B084662CD90DB5293FB713F328DB88F83EFA6473829825049E247084809068C3BEA0934725D86ADF7341FB9CAFA6ECBBE334D05273A8ADB024991FD52A37173D8E966AEDCA718E806924108902F455A> |-/V <1C60D8A8C9B6133298EFE19F514169B2EEE3921BA985C912ACD4DFFC89D37D3567FBDBA9FC5A6D76764A644273BABD55426A7A2644610214E658FDA0B94FB8AC3638B6E2AB4C5E8789911C8358C5EC6165AE6BC0FEB4D7624C7BA972D4F00A8A1B4339A4F31AF7AB245E3F2988DC672A288B713A1F2E5C02E1887D9F732F8003341F35D9528B74F85995215D02CD87081A743E292CC7171CC16E8238EC8168CA61444C97B8F5B7E373DB1169291C5496026691EAF8> |-/bracketleft <1C60D8A8C9B85D12C7FD88E8AD27D833610E68BB75FC7EF16DE4512BB7B8C5E0364FD7BFC585BA3A363373F5> |-/bracketright <1C60D8A8C9B85D12C7FD88E8AD27D833610C8BBFA865BE498B32F4578F9F69458BD31BBA5089DD1A8F61A0DF> |-/a <1C60D8A8C9B752AB3DC5DF79137F171AB577EC746E9985BD1DE96837CEF1DEA48D7D27260C7C7322F99E4296B839C62F65A64E636BC474CE2239895BE8656790A0C5CA6031741B0F7FABFF0A46B85CB2914D6506539949EE96DF768328856311BCC165C9E04D0C64F4698152B28ECBF186E6D19CF18C2535D7AFD403DD42BDCC8DAD14BDCC9C9A4F278509AB5C49AE5DB321EED2831122881D8D62586149EF7F> |-/b <1C60D8A8C9B79C5F973E01663BD36EF6A8BF02D069A7EE989ECF5D0393F400A4CC7FFE9B00309A44B53B429855D059F1EB9BD1DBFB0DF9195F931EF7EA5491C8D43611A22051624BF1706B27EC567B49209039693A163969C46FF4B733DB455CE95724C0864BD36065B5C636D55BF0A13C932633643B396D215B6D38EC9AAB9ACE862F66BC4A199E> |-/c <1C60D8A8C9B7686E50B91A103C25982F9A302EA4F8141240DCC661C74F885E7E26E132F04A32F771AF1E981D85F2F45479CE056A7979B5D31D6ACDE50657395AA1E0804FC72234B35D73160EC1DB8AC3DC589CD9CD13254678243B8E8AFFA7C9C49116F9C3FD5CFBBEEBE8EFE08DFB00> |-/d <1C60D8A8C9B79C5F973E01663BD36EF6A8BF028D4B0A7A4D9A6B1D8F8010C50CB86E629F9BA29716CB03A29B62B2BC55176F9023051921DDD1ABA12B2D1931F5305D2F2C6A93A518F54BAB51C13B6E7278B0BF99D06C13B9ED52D0A2FE43A7DA2672E57649FA06D9304D05278701CCD983A0F2E5F0F077D1FA728F1AFE6F10AE3152B97E4D2200C0E44E2F1A83> |-/e <1C60D8A8C9B7686E50B91A10F4C805B90007B8ED9F69CD2ABB860BC6B4C24ADD309DD878EF1585F238AE8F9D91356FA3239D5176BBB7DB2E85C191C46227879B3BF7D3968B6A2DF76C157A7C772E03B2D4C63BD69B1201900C6BD10D61A3ACE648AF080836F4E237C1FE890558DD8376> |-/f <1C60D8A8C9B8418669523E84D09FFECF53410DB70379DEC38D02232E07464685F3EC78C4446599065FF58DDFB8E548ECFC904A52B6282F09EB547C303AA492145B455F05A013C3831043B4015F3586892E8FABEF1DC9D0F105AADC0DC2D8990057E512587B8BE3CDEB9A7989AB6F6D4F3E13C1AD2A318450BB6E19462D24D7E11A62477410758B92BFAC5FFDEAB6A843A599C5441B39BC> |-/g <1C60D8A8C9B752AB470B4A9661AD18D19A581C4D690EDDD4100E53B28E9F7BBEDEAA1385B79045B700DEA568C3019E5C596E7A66C5BC825F40CE296C60F1B092B5BB14AFFFAFC76A328AC29586AC90AAB636CC004C7ED9FBF40060B03EEDA84B8C35DE7A42F46EEF6201A70FE64C1DF3B9689FDFC6452A26797E5D5B28F0314F337B3ABD23CD4B5C8ABC1D39DA1F56BC8A5D8E6BAEB4DF785AE9CB937C45B0390FC706BE0196DADFEB0D01F7F2BE059EE99CFF11EB45B089108526DA6402A0E965D58457B51B3E9964B87513B82E9A621770523EE5CD42171AEDF8901601746780534133C2F8427ADD19CBC6B5800A44F412C931DF053A5A5E60930FE1276D661D1D1E1BCEB08D8536C6E9> |-/h <1C60D8A8C9B79C5F9DD058B93AC67891D0EF62C068BBE0C9778A4B557364657A2B3EAB237FC048CA9C206978D503894899312F16BD4CBC29CC5BDFD5B339254228D699CD4175C78CD950F4E4603A391782A54AC11469A046EF0D6D3F5309C2CDA02F1B4274291B5D220666709FF904C69EB458DC0177486F120A6C94934A2612EB90583911C0EBFDE4B13B93D4A8398BA491F43100EB77D827E54C705CABDA9C3EC30E637394FABD07404DF1CD0153873157B7AD181B1FB8A151CD17A7C3D021980D71289AB5> |-/i <1C60D8A8C9B85D12B724967C6CB76D0959368207B4342C19CE1B9EC1C979AFE39945CDB07DCB68293DEF3F9F5B5DDD81F9245C20D5895AB44AE881F948D9AA2C98FD220B63C8E09F1AB810D64CA173E795C253747F5788C563CE245C4123BABA356BA9A298ED2228E0B30341F78270B1D0D1ECB7ED7474C78F> |-/k <1C60D8A8C9B7B71A30F4AAE592D95FFEBD9656B7569E4BE8065B9AFC730923A9905CB2D34EB2B68358CFAF19484A87F6BC10294C86F6A89E328035AD30643DFA4B6A99EFA1FBCF64CAA1B436BD6D9AFDB2F27062AA2CB56C5B1BE932FFADDA8763392FBD91992445C47311B776BC2081F88B3C734F4B23F1B4EF6A7CDBCC885E3B4066AE2620591C23699E97226A2A6295CF7AF4F672D6972D22F99A37ED50C7FD9337393CAEC3A49C85F8F9A25B1B7629D2D7FC5482EC37B3C0D2155A58E81315F2D3F5F82E378CA0CF78B263B86DBA2D46D2CF5BFAA3310EF76E8069350A67CB2F7C3188D56DA2F127A84DDCEBDA39EF08BE960D478A17C3> |-/l <1C60D8A8C9B85D12B724967D35F648783331BBC1EE8DB5003079F7430DA43E81BBC7468DA6B1B45BE0E5907E1FD60F6A47B1CFDFF488C6309642616C183AB49CEE81F55EF5087AB0E56404FBB1395EDD51A084257E4A1ADB8135145C> |-/m <1C60D8A8C9B6A283882D363B297DC57602AD66D72CBDD14B96028B2117AEF8EB136D25775EDA43CFEC4B116DA2DA96DF40A59AD9C36883BE70C73BB47C182B3B2165186260C1A6A3346C491D60A82CC3710CBFDF5D41A93DFE15B1E9657F856AEA13843CBCF324C7F16659D7A3E262F7907AD214A2AA60E6C8D1180555ECA65AE18EC4F564C8F81E6C9EF02EF5E221BE67A216CC97719F71A73C30B051EB2E34C38BE563FAE3A3D3F17702CC4D3A0BFDDDA19480DF898FB02FD8EDEBCEAE9F5EA5799465A5085FB81855D4CB0AD54165408FE59CDCBFCC87FF2417A8A3E3573392746E6E750807B47EA14470F9ED2DA2D88F35335023DFEAE9B0F377CFEAF4606DBC8A627207D1BB55B9AE3BFA16942EF0CC5E7721356B> |-/n <1C60D8A8C9B79C5F9DD058B93AC6789F3CBB814BFC1F00EDB54718B7393928D3B2265CD93D424660C039425CBA4398983D3A3E0B2F08E4ECAAC3A11CEE6AA91394591D10563F18B25C1714DF0FF3721666094230FA4F024DEE11AC8130DA2FCE9082EBB1BDBAD74BEA1646226506565238B4B08B6317D554CCC162155DA4CAC5F0A99B2D53A7B6A1D2819C65F282360783E5114E4B70FA9BB0E38436A61EF9BC341E7A8D15474081F3D30667FD4E969668F84544C7B939C80D37CF3217308F8868> |-/o <1C60D8A8C9B752AB3DFB68D30F19F1CA9272CDB5ACB821A6F71A9CC3442938CF6346EFA7660C66DA069F5EBDC24067D57DFFC05D80799E177A95094BFCA67A276154D6CBA4C1E5D133279DB5B2E0A865041C00DB37E8AF5290A042E491412C351C8C067D23CD2917758C0BCC7C9DAFE0DE1029A6C28786> |-/p <1C60D8A8C9B79C5FEDAC3A5356612CABCD4B9B1627D68462987B7A70A6F73E962D75C0768D4251A1A9D7D2337D7BBECE040BEC6CE049708ED932D339620D1B8715D1596A1865F43ABB89A0C1B60EB8D33E9DCA285F730839BEC55CE38C57C17862D101F34E39EFFAD28CAC702FF76E283D09625FCCA7E3A1E34ED19135AF7AACEAD2ADC4454A31D80873574D5E5E5331CE826316DB0221E51ECA76C5DD73AD0B85B75ACCFC6C8370EA3C7ECCBFAD28F838> |-/q <1C60D8A8C9B7B71A401529639E6CEC0BC5F178156F825872933D78804EEBCA737D2006FFA3364D8326D632DB5B14266ADF36DA6E2624FB3A794E80526E17555004EE7B8A9A3F24F67FAF54782E0EEC0D6DC762B03070D42393B9D9F543859E0450D20FE38EF74DC4886409DCC3C03CAA4C655F0EA9C1E58BCAE0F34CBF64692BC21726F2A8CD409287A1A1C82A6C8F45C1C00E12231BD9A678151DADA4E9A6> |-/r <1C60D8A8C9B73F59AC4C5EA853B4E2F03C64C0C05FD52BC33122FCCA4BFD51EB9E09AC5195D025A282E25ADC995FA462E62BFD3FBB78FCF4F94F52F42782F1036F93757E7816AB901DD476C8DB29DFD76A8F977E55D47316848B4CBB9C2E9C231E1377AEA3E4ABB6343871DED0448700F525D58C2DDE58DACF835ADC433BD339598286578A85E865AA10027CFEFDE957> |-/s <1C60D8A8C9B7397095546C4A386811A909F264178C102E37E91BC31B924D9B3178CC879F813C9FBB28DDFAFB5E4DB00AB47969517F6CA9E4D009805CCA02704F29F1D897E47248614C06B38AB9A6CC2CEE2ABD4589B792535C94946347E192BCD5837CE43D7ADDA9D020C9042E829DE580CEC30A08C16AC2D87AF6B276C3A330306CED37BE405496AC7E42FA5ED43499AD61FCD13817A426BD247F0B326AA7AE4D4BC1AB9BB25568BB7CBC493F05A0BA6E2659752A4C90130ADF1F0C148FA36155> |-/t <1C60D8A8C9B73F59A6AC2B53C00F251FAA3807B287449C6CE7B1D574F12775168A2081C70118BD346A2CBA3F46FA00F6475C5B747F4FFE0350AC63B6F034A86CAAC4C0E72D751CC6FA6AAFAF7EEB756D424FBA69667E00> |-/u <1C60D8A8C9B79C5F973E0166279F70672EBC89841EA2F6C6916249FF7730FDFB878E3685E5C001D8E6D0F7D826F009D3FC8EFCE4B248B62100A438B6E5EB2E9B4B75853ADF8C25B6B3965D080DC9A3EDBE25DAC5D4D23A3E962A425C47202B665CCA8F038084193F908BB9BE29956E> |-/v <1C60D8A8C9B7B71A3ACC73FAC83C2D25ACEF087890157917D2964E038B486372C83793522755C297FCB24415E513C906D62889A36D4326F50C561388E03D3F2A5E15E278F275546A234452F840E33F6A39738B25E04811953E3E631AF95ECF8F5A0361C12ED7AF0017887A3964C840B041FA3FFDFDB5036504AEE3696DE5E08CD4F9C06680C3D0DA69444DD8DD91A47C6C1908E43D4AF65567609F1DC8A28098A058A81326BBE0C46AB4CBED12A93154B3E137> |-/w <1C60D8A8C9B6367591C005587708E42BDE65588BBEC4233514C6BD2ECAD7D4BC65627304ED240CFB1B08FB1360A88844D55689A2DCE615E7A221F9961F1C8958C6878E9FF5508472B0AA2859F9DEC7851DA4825686B31704CBF5739C40FC9E1AF798372D02EBA37F60A600A32D4063D05B3137059FF095670902339BCD15EDE40EB72AE3B51B80A47C0F1755BF1D6550A1FCFA76C08EA4AB817416E334C6DFC77AA51C49487259FBBFA82994645FAE998F0F69C7ED0EC5C97DA88BB986CB90F73BCE1B195B5B43A326286BF2507D0F0A3869D87FDA14B38C67B4F54E9B57AD8201C9D464DEAE8D97C42B2742539EF8A9E7B94494F38E247E1DAA8ECB3FE5B07660BF096D3283E9E7483CDDA2F6FB9748A5DF4329D0> |-/x <1C60D8A8C9B7B71A30F4AAE597D2BC6E943C480392CBE393C8158B0E0D55CD6AEB88851F7B47CFF473BC5F192599C09172BBC9FFC8858BCE2B4A3439AFCB72628D658CC887FBEFC56B3F0B79852A127CEE5D6ABA11CA02BFC6538EDED53701B795459E94DD08D3D62C21EFAF807FF422F47A2F0F96E389E28B406770420EFD91AFFA2D47C86EA2344793DE85852D13D854CEC729D67651116BCDEB0A62C186657BF24028A0FA81F5E0B63BDF0F920576D68461C3FEB8CA73DCED6E8DD683F48110922D8F157DA8CB21C8E05A717663B6937F1B03D0A195C417BE2289E2D570AB61355B641707E483FB54D197C606F6CDE4D3CCB2FE203D08CC27CE013A7B2645866136466861ED9EA83CED1E81F60F3A4AFBDFE91646A177BC1A8790C86236D2653ECDF731EE509D1F124BABD68F3E73693512C4E6E296CD9189ECE2C1C7782A9B> |-/y <1C60D8A8C9B7B71A402354816A787102A946B87C234C1D555BE26673230F131F8D9E83D7285569459160FE8B997E3AA5762841C153B7CAE4E64E6614BB3E44F200846EA6FE1DE38C1AA2ECDCA6EE1BDBA8F7E245B04FBE3465ECD69EB9C2CECFE144ADAC18522E08B800657079170537209F60E5AB8E4E79C87A60D3293A042DE87D89290C459B081C317590A95ED6AE48E8D4E6E64C1A8B74528B609180A7CC544CA7CB6CB18D66021F02D2FA36987A7D8C9C4233344931FCA84B2ECA31B03711880F3C01772CC49004235570DB7C98BC551C8B06ADB5> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PTEMDZ+CMR12 /SJERMX+CMR12 findfont ct_VMDictPut/PTEMDZ+CMR12*1 [12{/.notdef}rp /fi 27{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period 2{/.notdef}rp /one /two /.notdef /four 6{/.notdef}rp /semicolon 5{/.notdef}rp /A 2{/.notdef}rp /D 3{/.notdef}rp /H 3{/.notdef}rp /L /M /.notdef /O /P 2{/.notdef}rp /S /T /.notdef /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y 134{/.notdef}rp]PTEMDZ+CMR12 nfPTEMDZ+CMR12*1 [11.955 0 0 -11.955 0 0 ]msf458.564 -323.088 mo(2)sh10.8741 -286.226 mo(SMpredictionbyatleastafactoroftwoinordertoobtainade\014nitivetestwhether)[6.50359 15.9504 6.50359 4.55244 5.20277 6.50359 3.2518 5.20277 4.55244 3.2518 5.85309 11.7399 6.1808 11.4027 5.85309 9.78874 3.25179 5.20277 5.8531 4.617 9.77679 11.0894 3.57687 5.85309 5.20276 4.55244 5.85309 9.77679 5.85309 8.81317 4.22961 8.11984 11.0894 3.25177 11.7399 5.85312 4.55243 6.5036 5.20276 9.77676 4.55246 11.0894 5.85309 6.5036 4.55243 5.85309 3.2518 11.7279 11.0894 6.5036 5.20276 6.5036 6.50357 3.2518 4.55246 3.2518 5.8436 10.4391 4.55243 5.20279 4.617 9.77679 8.45456 6.5036 5.20276 4.55246 6.50357 5.20282 0 ]xsh10.8741 -271.78 mo(thepresentlyobserveddiscrepancyiscausedbynewparticlesmakingtheirappearance)[4.55244 6.50359 9.82935 6.5036 4.55244 5.20276 4.61702 5.20277 6.18081 4.55244 3.2518 10.8049 5.85309 6.5036 4.61702 5.20277 4.55243 5.85556 5.20276 11.1302 6.5036 3.25179 4.61702 5.20277 4.55244 5.20276 6.5036 5.85309 6.5036 5.20276 10.805 3.25177 9.24353 5.20276 5.85312 6.50357 4.61703 5.20279 11.1302 6.18082 10.8049 6.5036 5.20279 13.0812 6.5036 5.85309 4.55243 4.55246 3.2518 5.20276 3.2518 5.20276 9.25555 9.74323 5.85309 6.17834 3.25177 6.5036 10.4917 4.55246 6.5036 5.20273 3.2518 9.17896 5.85309 6.5036 6.82639 5.20276 5.85309 4.55246 5.85309 6.50357 5.20276 0 ]xsh10.8741 -257.334 mo(inquantumcorrectionstotheanomalousmagneticmoment.Ofcourse,quantumcorrec-)[3.2518 10.3531 6.17834 6.49164 5.85309 6.1808 4.55244 6.5036 13.6047 5.20277 5.85309 4.55244 4.55244 5.20276 5.20277 4.55244 3.2518 5.85309 6.5036 8.45456 4.55243 9.70264 4.55244 6.50359 9.04031 5.85309 6.50359 5.85309 9.7552 5.85309 3.25183 5.85309 6.5036 8.46655 9.74323 5.85309 5.85309 6.5036 5.20276 4.55243 3.2518 9.05231 9.75522 5.85309 9.75522 5.20276 6.18079 4.55246 8.42831 9.10489 7.42639 5.20276 5.85309 6.5036 4.55243 4.61703 5.20276 7.10135 6.17834 6.5036 5.85306 6.18082 4.55243 6.5036 13.5927 5.20279 5.85309 4.55243 4.55246 5.20279 5.20276 0 ]xsh10.8741 -242.888 mo(tionsfromknownparticlesareincludedintheSMandenterthecorrespondingprediction)[4.55244 3.2518 5.85309 6.50359 7.97638 3.57687 4.55244 5.85309 13.1026 6.17834 6.5036 5.5303 8.45456 9.86295 6.5036 5.85309 4.55246 4.55243 3.2518 5.20276 3.2518 5.20277 7.97638 5.85309 4.55244 8.55017 3.25179 6.5036 5.20277 3.25179 6.5036 6.50362 5.20276 9.86292 3.25183 9.86292 4.55246 6.5036 8.5621 6.5036 14.0735 5.85309 6.5036 9.86295 5.20279 6.18079 4.55246 5.20276 7.9118 4.55246 6.50357 8.5502 5.20276 5.85309 4.55243 4.55246 5.20276 4.61703 6.82639 5.85309 6.5036 6.5036 3.2518 6.5036 9.21243 6.50357 4.55246 5.20276 6.5036 3.2518 5.20276 4.55246 3.25183 5.85303 0 ]xsh10.8741 -228.443 mo(for)[3.57687 5.8531 0 ]xsh%ADOBeginSubsetFont: JBVAAA+CMMI12 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /JBVAAA+CMMI12 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI12.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 97 /a putdef/UniqueID 5087386 def/FontBBox {-31 -250 1026 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-21 0 431 441 452 463 683 704] def/OtherBlues [-204 -194] def/BlueScale 0.0437899 def/StdHW [22] def/StdVW [65] def/StemSnapH [22 29] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/a <1C60D8A8C9B7B9B9A72E7DE322C6832BE644423B0A88991AD27EBB446C4B78A15D1551E0041671A94D00FAC341F63F9F6BD0BD1F7E1159EBC4D3A51076CBAD3084D7BB435F13C64A1022F92EAF97A9B9FAB89D5EF4E00013898C527E10241850938E8A18F13139220B05353D163E079F72D46D074AF4BE0712F52399BD5BFEDD0FF6EDB7D541DC9FE47616272E42EA7EC15CA1C36E943C9AE8E71D7BF511B93807535299A1710F16F2B27DB38539B4CC43D74740BCDB557F037C4BE963271D0813FE14E2562EE6FDE375> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PTEMEA+CMMI12 /JBVAAA+CMMI12 findfont ct_VMDictPut/PTEMEA+CMMI12*1 [97{/.notdef}rp /a 158{/.notdef}rp]PTEMEA+CMMI12 nfPTEMEA+CMMI12*1 [11.955 0 0 -11.955 0 0 ]msf28.9601 -228.443 mo(a)sh%ADOBeginSubsetFont: YUMQMX+CMMI8 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /YUMQMX+CMMI8 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI8.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 22 /mu putdef/UniqueID 5087383 def/FontBBox {-24 -250 1110 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-21 0 431 441 452 463 683 704] def/OtherBlues [-204 -194] def/BlueScale 0.0437899 def/StdHW [32] def/StdVW [78] def/StemSnapH [28 32] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/mu <1C60D8A8C9B672D420A18B45CF9CD91BFFEF8A6FD990749ACB73A18C210BFEA50BB50C0CD7B5E4E22B6BE0250959F787F0DC2DC8325858C07990776313772969B7EDFF26CB692C2A5616F9A33E9EB334E3162A0EC7641412D2D5606C8485F41190F19776986202E2E1E491EE887C2EE164B6CAB36370540634FEF3AB7454EB0F6143CEB708F0D64BE8D41E8D0247494716DF468ED1E1AC3A3A1A6DC05F4945FADCFCD2BB93A216FB5D5803DA0AD614B2BA28E0AE32AEA42F43ED4429A07D3F308355862D63DDEC4ED2724D5450EDB700> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PTEMEB+CMMI8 /YUMQMX+CMMI8 findfont ct_VMDictPut/PTEMEB+CMMI8*1 [22{/.notdef}rp /mu 233{/.notdef}rp]PTEMEB+CMMI8 nfPTEMEB+CMMI8*1 [7.97 0 0 -7.97 0 0 ]msf35.1051 -226.649 mo(\026)shPTEMDZ+CMR12*1 [11.955 0 0 -11.955 0 0 ]msf40.6981 -228.443 mo(.However,thepartoftheSMquantumcorrectionscausedbyhadronsisnoteasy)[9.06193 8.77489 5.5303 8.13178 5.19081 5.85556 5.20277 4.55243 7.41214 4.55246 6.50359 9.30333 6.5036 5.85309 4.55244 8.65302 5.85309 7.67738 4.55246 6.5036 9.31528 6.5036 14.8267 6.17834 6.5036 5.85309 6.18079 4.55243 6.5036 13.8557 5.20276 5.85309 4.55243 4.55246 5.20276 5.20276 4.55246 3.2518 5.85309 6.5036 8.71756 5.20276 5.85309 6.5036 4.617 5.20279 10.6042 6.18082 10.2789 6.50357 5.85312 6.50357 4.55246 5.85309 6.5036 8.72955 3.2518 8.71753 6.5036 5.85309 8.65311 5.20276 5.85309 4.617 0 ]xsh10.8741 -213.997 mo(todetermineandentirelydominatestheaccuracyoftheSMprediction.Thisisdueto)[4.55244 10.3482 6.50359 5.20277 4.55244 5.20276 4.55244 9.75522 3.2518 6.50359 9.69785 5.85309 6.5036 10.9987 5.20279 6.18079 4.55244 3.25179 4.55246 5.20276 3.2518 10.6734 6.5036 5.85309 9.74332 3.2518 6.5036 5.85309 4.55244 5.20276 9.11206 4.55243 6.5036 9.69788 5.85309 5.20276 5.20276 6.5036 4.55246 5.85309 5.20279 10.6733 5.85309 8.07199 4.55246 6.5036 9.69778 6.5036 15.2212 6.5036 4.55243 5.20276 6.5036 3.2518 5.20276 4.55246 3.2518 5.85309 6.5036 10.2335 8.45453 6.5036 3.2518 9.11215 3.25177 9.11206 6.5036 6.5036 9.69788 4.55243 0 ]xsh10.8741 -199.551 mo(ourverylimitedunderstandingofthenon-perturbativelow-energyaspectsofthestrong)[5.85309 6.5036 8.66496 5.8436 5.20277 4.55244 10.2909 3.25179 3.25179 9.75522 3.2518 4.55243 5.20277 10.6161 6.50359 6.5036 6.5036 5.20276 4.55246 4.617 4.55246 5.84113 6.50359 6.5036 3.2518 6.5036 9.96561 5.8531 7.68939 4.55244 6.50362 9.30328 6.5036 5.85309 6.5036 3.9021 6.82642 5.20276 4.55243 4.55243 6.5036 4.55246 6.5036 5.85309 4.55243 3.2518 5.85556 9.31531 3.2518 5.5303 8.44266 3.90213 5.20276 6.5036 5.20276 4.55246 5.85309 10.2909 5.85309 4.61703 6.82629 5.20276 5.20276 4.55246 8.72952 5.85312 7.68939 4.55246 6.50357 9.30341 4.61703 4.55243 4.55246 5.85312 6.50354 0 ]xsh10.8741 -185.105 mo(interaction[1].)[3.2518 6.18081 4.55244 5.20277 4.55244 5.85309 5.20277 4.55244 3.25179 5.85309 10.4009 3.2518 5.85309 3.2518 0 ]xsh28.4331 -170.659 mo(Thereisaningeniouswayoutofthisproblemrequiringacloseconnectionbetween)[8.45457 6.50359 5.20277 4.55244 9.80544 3.25179 9.2197 5.8531 11.1063 3.2518 6.5036 5.85309 5.20276 6.5036 3.2518 5.85309 6.50359 9.21974 8.11978 5.53027 10.7811 5.85309 6.5036 9.15509 5.85309 8.1796 4.55243 6.5036 3.2518 9.21964 6.5036 4.55243 5.85309 6.5036 3.2518 5.20276 14.3579 4.55246 5.20276 6.17834 6.5036 3.25177 4.55246 3.2518 6.5036 10.4557 10.4438 5.20276 3.2518 5.85309 4.61703 9.80548 5.20276 5.85309 6.5036 6.5036 5.20276 5.20279 4.55243 3.2518 5.85309 11.1062 6.82639 5.20276 4.22968 8.13187 5.20279 5.20276 0 ]xsh10.8741 -156.213 mo(theoreticalandexperimentalactivities.Dispersiontheoryhasthepotentialtolinkthe)[4.55244 6.50359 5.20277 5.8531 4.55244 5.20277 4.55244 3.2518 5.20276 5.85309 7.93817 5.85309 6.5036 11.1899 5.20277 6.17834 6.82639 5.20277 4.55243 3.2518 9.75522 5.20276 6.18082 4.55244 5.85309 7.93816 5.85309 5.20277 4.55244 3.2518 6.17833 3.2518 4.55244 3.2518 5.20276 4.61703 10.8193 8.93997 3.2518 4.617 6.82642 5.20276 4.55243 4.61703 3.2518 5.85309 11.2019 4.55243 6.5036 5.20279 5.85309 4.55243 10.8647 6.5036 5.85309 9.30338 4.55243 6.5036 9.88913 6.83835 5.84109 4.55243 5.20279 6.18088 4.55246 3.2518 5.85309 7.93814 4.55246 10.5514 3.2518 3.2518 6.5036 10.8647 4.55249 6.50354 0 ]xsh10.8741 -141.768 mo(hadronicquantumcorrectionsfor)[6.50359 5.8531 6.50359 4.55244 5.85309 6.50359 3.2518 8.58603 6.17834 6.5036 5.85309 6.16885 4.55244 6.5036 13.1384 5.20277 5.85309 4.55244 4.55244 5.20277 5.20276 4.55244 3.2518 5.85309 6.5036 8.00037 3.57686 5.85309 0 ]xshPTEMEA+CMMI12*1 [11.955 0 0 -11.955 0 0 ]msf183.476 -141.768 mo(a)shPTEMEB+CMMI8*1 [7.97 0 0 -7.97 0 0 ]msf189.621 -139.974 mo(\026)shPTEMDZ+CMR12*1 [11.955 0 0 -11.955 0 0 ]msf198.596 -141.768 mo(tomeasurablehadronicreactions[4,11].)[4.55243 9.23636 9.75522 5.20276 5.85312 4.617 6.5036 4.55243 5.85309 6.5036 3.2518 8.58603 6.5036 5.85309 6.5036 4.55243 5.85309 6.5036 3.23984 8.58603 4.55243 5.20276 5.85309 5.20279 4.55246 3.25177 5.85309 6.5036 8.00037 3.2518 5.85309 6.63504 5.85309 5.85309 3.25177 0 ]xsh%ADOBeginSubsetFont: HXCQMX+CMBX12 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /HXCQMX+CMBX12 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMBX12.) def/Weight (Bold) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 46 /period putdup 77 /M putdup 83 /S putdup 84 /T putdup 97 /a putdup 98 /b putdup 99 /c putdup 100 /d putdup 101 /e putdup 102 /f putdup 103 /g putdup 104 /h putdup 105 /i putdup 106 /j putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 113 /q putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 118 /v putdup 121 /y putdef/UniqueID 5000769 def/FontBBox {-53 -251 1139 750} defendsystemdict begindup /Private14 dict dup begin/|- {def} def/| {put} def/BlueValues [-12 0 444 453 656 676 686 698] def/OtherBlues [-201 -194] def/BlueScale 0.0437899 def/StdHW [43] def/StdVW [109] def/StemSnapH [34 43] def/StemSnapV [109 132] def/ForceBold true def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings27 dict dup begin/period <1C60D8A8C9B8327EE938007441505022C085D9CE9D503AB3A6F7F1795E76DC10753A7513B565E0C0733B> |-/M <1C60D8A8C9B52D9171631CF8575BD0D56BF3222C9DC8289A2E2279C1F3D716A304F30075F7A186D010A1205CD7A69E00D787525CF3CFDFA9B175B30394C897F53CBE0543F794F1764B54021A57BC0A07E8694E2E159396103F20F698AF7B737D2E571F0666BF902BAE19B90CAC4054DC407FBDC2E68FC8DC7791A9ABED1609BD5FCBA26C95A34BD3DBB4EC40AD94D9E89FBF150B05B71465A654CF36C896B5E5157116E23A86E335987B0CA5B520927516613B1322FCA5E038363F8F87B430625D7A0C763640597532110A2CC2EF49641D68F5CDB5FACB9567E878F69DA029CC044319> |-/S <1C60D8A8C9B66482349528B2BBEBE35114D552D47D09F4073F9AA17F77743651C7BC1A1375D5197DE27A8A1B4F256DC0AF277B71EBF3982F0A182AA6E84428A60B999055086B0FFE3EF2EEAF5F2E4103901AE07C2445DEAE5CD221EC0118CD4F077B9FE101AAE117AC5DFF99CC1F987EA39FD8688F98A68CF00E834D454B0F9BB5F65636C26F36D5A970298B721CBF9B4F1B03089EA8459B383D6543F29B1C1DDC72AB28032B46B76E80B09F47A8815390CA9C551B93D09CA9C8518B46B065> |-/T <1C60D8A8C9B6C327BCC64694126C2D8492C1F905980082861FD88B5857B4DCD5EE9493918CE3C0A4DC905F06677C5A68FDF652DBAAA475FFD0888FB1F2568890BBC252AB26DA80B9D4F4463B60C7894E50F95A9595F5412886053DDD0D2AB267FAEAFF133E683313E24BBAD42E98E56B4BF2D6C9> |-/a <1C60D8A8C9B799EBAF1BF611287E8A90458A8E96D71CB0CBD8200F1549FA351AA399BBE741EC3A68C102D43E4895FDF68EA3A5B348FBDE5D4B8BFF1679F6F7A01B7BD3E9614E282738CB3886930E57F48D4D85C3F1ACF65EF23A2747889C7ECC4E9418E7383EFDB22C10B19AFCA835B203379AAF2E631627B37429498BEE0524E5B70032870064C6304644FF8478D705E0C2> |-/b <1C60D8A8C9B66482CEFC1B8CCAA8ECB70A481DCB896BF86DE7E70B3C0C83BA4BF555E7ACE0713ACDA6B10E8210385EA5DA1909A5AD87948540B2F14CE75D9D98E2A83D4DFA904A2E539698D9F70B5F91099018AFAE5DDDFB4D8F334903047F74E14DA6BF5F3EFE9E5DC56375D6E088B9E5AAE0CE75517C9C287D09BE> |-/c <1C60D8A8C9B7A73DCB069ABECD090F087035A2A0FC01212EFB86AC561D5CB6571789CE0BEAEA2F7B26FC529CAC24A656A010EDD71F116CA10366A6F904D89D4F72110DC94560AD6AC90211DEB124421E894F1C23353FF2F3FE94854F2AD32D861EEABFDF9F2A661ABAD6EEF77F1829D78E959A8ECBA2EE89B8> |-/d <1C60D8A8C9B66482CEFC1B8CCAA8ECB70A481D89B6EE23C0649631B2BBEEBB68FFB00EB4A521C025F6BF2CC6C9DD84C26793452BF5ABD32DDEE1B99B0839EADE07FECE3533EF84AC5ECAAEAF456E4B2E6A60CA723A628C91317093AED85939A6D050BA1CD9E123C96E1EA93F21999E0DA204A63C74469853DFF868BB47678A767EB3> |-/e <1C60D8A8C9B7BA8F6751A5CDF5C037AAB4128F34C3509ABF7ADE828199B2C17A2D8CBE6C57B8C57DF596BB41E015213D76AB4347745EE1D53AC0E2F3A42593C750E77C28ACCF7D98F14A19891FB089D6AA897201C1BB57400EB2994D4C0704569E89434DA95188AB407B2AF60BA259E8DECDF777F1053F8339D4CD87> |-/f <1C60D8A8C9B8151C55CD621615E29EC5D3FD6C7024133AE8FD476A202D7F61123D0055E73E9F9874AC26DF6F3542A897C830FAFCCA9E48A34156ED4E24BB484C3C55C189657A6760108A6DFCF242A23DB4AED2FF4F224CC4DECABF6F827C2BF8E736B879276993588E78CA3D2ECA17A3C0532A8B438BE0B5AEE26D7F0F7EC853E330DB3CBD9F07934736B8283B52C54B> |-/g <1C60D8A8C9B7E965A591AF82D35551FE1AED60511B0C0CFB03CB9A2FF982E02CC4D1A6F26B23541BFE7656A6E0173456AA65ABE9EB173350E4FD788E842F32923C78057256C35A0CCFFA3395C001F2F98BA3BC78CBE16BECAC7007393D8152BC013AD7264A86A1DDA9A87DA01DD9F59D1A662FD546F0458B0E7A2283E6DF52F2BABD5BD44555B6B7FAEA44430028C3B67CD2C2E707F4A62E5383DDDF28D601D6E9435AEEABFBCA21EC598961EB7B44869E26BC110F091B23C25496D7201BA301ABDAFBC821E4171C0496A6DEE27A40727141EC8CD9E960A9585E540573DC903E7296E59C6EA591F7F566C62C92> |-/h <1C60D8A8C9B66482C0B06145CAB2A509108880297DE1AC3AF647F612B06924FD7EBA415A61C4D2267393176AC8E17E469557E93424EC4BDDC205BB67185C6DE17CBEC5474B24D838B1A22CD25AA25F9453562A9B31AEB681E663DA5A377F7A4E7FBAA60108470FA6485D4D13E7CE5FDF3C1AD01145FBA8827A60E349579C0F5A43E5FF56DFBEF3DC260B54964D6977F7CA50847C657F67E00ABE56D06A5FE56ED7FDBAC7727BA8ADF1AED75A713CC3F4561865> |-/i <1C60D8A8C9B8327EE9798F01AD33C2B041AC990A254153B7A3DB449BFF29475C81465CBDFEAF145A1233C7AC9F5AE2EF93150E4FCE1C5576AC946E60B1B96A25C3C48586365157E27231E5EDF942155CF86A36ABB0F21DD9A062689241EB8C57162EB75581E188DACA9123A84CA958FCED1C139903> |-/j <1C60D8A8C9B8151C259BB2E4253452DE75B4A0BCB46D3375EAFC78A929D19CF669692169125A990C125802CFE13B663B901FCE5684F7294629327B00BB31642BFD6CB999070FB89A4F91E18973C08FBA4B3CB05D829EFD5476A3E19202F14A669898EB8A775749BB22AACBC214CBC5E9D752972CD9751A12BBE0B9> |-/l <1C60D8A8C9B8327EE9798F00D76E6F902F55B0E6CAA9EAC1DCFE84AB3CA50D6B9EE0D9A763C6A97091994A196CF0649328BE7BA645F4DF8F12C88C016E2BE3407D7193D14784BFDF6182F72E54331EF089953154662A34> |-/m <1C60D8A8C9B5AF628A7B1A277F2530428F1B3954469D0692762EE3963A836FF6E6390E491431CE79374B1E623FA27499B31272D2781A1B55652F1EBB10BAC5B7EA5716B43494809C6BFE37A1BA4C21BCC8903F3D720E36F9A61EF93C61BDE2061D8A9FA1642583CCC2414F38C7AE4E2A84CEEAFC196A920506F7CDFB4758788CE0B2B588DC928EC3138EB88C99B697E20B74AD3A18E78DD9A1B3634DD1BEB00F44872332E99E4290E9BF455B6AD05AB9C6147C8901164AD9F9884560C33B3AC55459D5D03F6CA4CBC578CD38CFF4FA40780D76EDCD5D554A0B9A924DE3C78B183FCB2C7A68238EBD9427033DFD011A073E0D62A8CECC5BF39954F21CE63B477455> |-/n <1C60D8A8C9B66482C0B06145CAB2A50769325C1784AEB8C412F792549A059C436DA61F5EDB218A3269205FCEDD453F91E2876424303EEA35BCFDAAD1C07A66181A2BED591DF8848DD3B9B30137BC2D9FAF84783FE1EB6DFACDB1107A8CF86E751DD1805C773FA73216611A24781345206BD5433EF11F4D82B295ABFDE19DB22503D93E42CD1DA06DF63F42093E589B98E836487FBBC8AA7BBB78298EA47F8FDD8CC2D8B9771642C342ABCB1A3B910F> |-/o <1C60D8A8C9B7E965DBF8A59929D669C95463A4293E1F83A2360E6C40F8E7FC074BF1F0815C172E96CB41ABBAEFF46E4DB46DC3CDD125C920FDD4CD4C3841BFA1DF88E5327F75D02A2DF882DEE0F02A20C8A53FC85F309C24F47CF65D60D3F299DA026C987DD3F6ABDB6088> |-/p <1C60D8A8C9B66482B07643C41869C63A3CA7FC1EC17173E15F45A372F39CDB8097391D86A793A69DC84E9647F3F0290802BAC4F29862B34C720EF7E8AE5FDD48ECBA7066A95E78E9FB9D730DFBB07F219B3809371BA67097CDD95CBC00D77865DAC7FE81FC489DB9389F286C44B43F6B2F59F4F889938EE9FE740666C5D92877FC0D3AAB92D69167399C155C5C729B4E228EF185687F93923C1E1A3DA62416> |-/q <1C60D8A8C9B7CA64262634EFAB0113DBEFC751419DBF6F3F5D9B8860032CC901700A465150BB06AB21DA560774DD63CF4966B33A30E206A813FBDA0370151B200E2F7157F6D68E33AD03A5AD29B241E08B634A5128AABBA88FB9093D46502AFBDABFA2DAE3F212CCAB94C2B4787A7F1D8E7B417B2C8556C91921A0BC9545B4A036526894D2F40ECF2E19DE8A7817813F132889DD> |-/r <1C60D8A8C9B770DA3195F484E915F00235E8862AD1F894F00449A6D92168C0ABBFF4F8350031EBDD2A507997BB509C0574D9994D5F882E1635FFDD0AD51199159A292B6EADB2E422AB5DCE801D0F0E887EE201A87EB67821FE8F2801B2014C0F7EB8B1CFDB6D0F8240B7BB92593B21AE3C0D720ABE2164395DC9875014C00D0BDBE76E32> |-/s <1C60D8A8C9B760FDC9A921B7F3820296900F42FD262D9C3B2449309C80F02AF5EA17BA453DB667935B49BFBD9325090D3F8F874FA875CE9814E1F0C56DEE7FE7CE1520D3B7F438FE42294D8889D125BB2DAF764CF18AFC16664092C56E79CC8AA1968AB282BCA1EF2FA0B036FB4C53ADB9D711FCD9FCDE0B97F02A8FC8351C89022049B80CED4A00F7CF33CCDCA32032D71879DD2BCD1EEEF08B35653720FA86F2DF8CFB3106A23773FD267B3758696C96F18C8A4B73AF2CC2D6> |-/t <1C60D8A8C9B766CA4E2F73F61E322A5C8A2C92DC87809FC0C711FA59F47B15906E0B7947A7508C86C50A469AB8BF0D06F71C9733A48E876FE6BF81328AAC722D1968723C04D710C38D448D0D272C2E2FE58ADE5F1EC98E> |-/u <1C60D8A8C9B66482CEFC1B8CDC3949D8060F044C822065B746189721CA8CCDABC9D09195AC59AA714F9E1D918B81765576AD907EDB8C3E8D3AFB670C9FCBB0505950D41ABB897B8A024DA8945F0F6413361D28E025A92C3966AB1B457057CF7ED0CB5B> |-/v <1C60D8A8C9B7CA645B8CB88E3198C067339AD9EE38EEB55F35DF2BEB8F9ED874572F9D85EBEAFAEA8514D418074E55734A97EA1C430B2DA6C951CA9F1CBBC9339DA929AC662F3AF004B172D3FD4B99A5D102B80F1B302E6FAE2653E2E709E0E071281A2686488AC82DC9C236A0D678548F71D2BBF18A72786C6406D3017603597380E2F4F5EE1671697A4322881201A01E8ED66DD6C045CE5A5FA2903AE76624> |-/y <1C60D8A8C9B7CA64262CF52C3ECCF5320E85A56B48C70056D984E0555A55062AB66DD6C6FFF3B8391255D73CACE5B3297114506D3B99E42EF5994DA1DA00DA00033B9E9CA3EED616B18AAB30609871C6F5541A055C13751022AB57C3F2BE2ACAE97B8A490F9D9A262E174218C6052954F82F01DF4E9A446DD15C3410CEBA4C26A435B20B386BEEACDD33CF5EE70A6748890C15F8E965023789FF063AE030B74DCA1D5E6E20247626FC14E20B076F21897FDC02E72D3575744AF7B417705E4047E8E8539E05D69C18DB> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PTEMEC+CMBX12 /HXCQMX+CMBX12 findfont ct_VMDictPut/PTEMEC+CMBX12*1 [46{/.notdef}rp /period 30{/.notdef}rp /M 5{/.notdef}rp /S /T 12{/.notdef}rp /a /b /c /d /e /f /g /h /i /j /.notdef /l /m /n /o /p /q /r /s /t /u /v 2{/.notdef}rp /y 134{/.notdef}rp]PTEMEC+CMBX12 nfPTEMEC+CMBX12*1 [11.955 0 0 -11.955 0 0 ]msf408.614 -141.768 mo(Themain)[9.35352 7.47189 10.0219 11.2078 6.53827 3.7359 0 ]xsh10.8741 -127.322 mo(goaloftheproposedprojectistoquantitativelyimprovetheSMpredictionfor)[6.72469 6.72469 6.53826 7.10725 6.72469 7.49225 5.23032 7.47188 9.50787 7.47188 5.49336 6.72469 7.84247 6.72469 5.30438 6.13657 10.8551 7.47189 5.49335 7.46597 4.10899 6.13657 5.97749 8.61356 3.73593 8.67561 5.23032 10.108 7.09772 7.47189 6.53824 7.08929 5.23029 3.73596 5.23029 6.53827 5.23032 3.73593 6.72717 6.13657 3.73593 10.481 3.73593 11.2078 7.47186 5.49338 6.34213 6.72714 9.51984 5.23032 7.47189 9.50787 7.47186 16.1284 7.47186 5.49338 6.13657 7.47186 3.73593 5.97751 5.23032 3.73593 6.7247 10.8551 4.10901 6.72467 0 ]xshPTEMEA+CMMI12*1 [11.955 0 0 -11.955 0 0 ]msf10.8741 -112.876 mo(a)shPTEMEB+CMMI8*1 [7.97 0 0 -7.97 0 0 ]msf17.0191 -111.083 mo(\026)shPTEMEC+CMBX12*1 [11.955 0 0 -11.955 0 0 ]msf26.8601 -112.876 mo(bydevelopingfurtherthedispersiveapproachandprovidingthenecessary)[7.10127 11.3418 7.47187 6.13657 6.72714 6.13658 3.73593 6.72469 7.47188 3.73593 7.47188 10.9687 4.10899 7.47188 5.49335 5.23032 7.47188 6.13657 9.7493 5.23032 7.47186 10.3806 7.47188 3.73595 5.30435 7.84247 6.1366 5.49335 5.30438 3.7359 6.72717 10.3926 6.52628 7.47186 7.47186 5.49335 6.7247 6.53827 5.6069 11.7279 6.53827 7.47186 11.7159 7.47186 5.49338 6.3541 7.09772 3.73596 7.47186 3.73593 7.47189 10.9686 5.23032 7.47186 10.3806 7.47186 6.13657 5.97751 6.13657 5.30438 5.30435 6.53824 5.49341 0 ]xsh10.8741 -98.4301 mo(datainput.)[7.47188 6.53825 5.23031 11.0214 3.73594 7.47187 7.47187 7.47188 5.23032 0 ]xshPTEMDZ+CMR12*1 [11.955 0 0 -11.955 0 0 ]msf28.4331 -83.9841 mo(Thelargestuncertaintyresidesinthehadronicquantumcorrections[4].Atthelevelof)[8.45457 6.50359 8.26324 3.2518 5.85309 4.55244 5.85309 5.20277 4.61702 7.61293 6.50359 6.49165 5.20276 5.20276 4.55246 4.55243 5.85309 3.2518 6.18079 4.22964 9.23891 4.55244 5.20276 4.61702 3.2518 6.5036 5.20276 7.67747 3.25179 9.55214 4.55246 6.50357 8.26324 6.5036 5.85309 6.5036 4.55243 5.85309 6.5036 3.2518 8.26324 6.17834 6.5036 5.85309 6.18082 4.55243 6.5036 12.8037 5.20279 5.85309 4.55243 4.55246 5.20276 5.20276 4.55246 3.2518 5.85309 6.5036 7.67746 3.2518 5.85309 3.2518 8.17731 8.44006 7.61301 4.55246 6.50357 8.26321 3.2518 5.20276 5.85556 5.20279 6.31226 5.85303 0 ]xsh10.8741 -69.5381 mo(accuracythatisrelevantatthemomentthehadroniccontributionscanbesplitupinthe)[5.85309 5.20277 5.20277 6.50359 4.55244 5.85309 5.20277 9.69312 4.55244 6.5036 5.85309 8.06721 3.2518 8.13179 4.55244 5.20276 3.2518 5.20276 5.53278 5.85309 6.16885 8.06723 5.85309 8.07916 4.55243 6.5036 8.71753 9.75522 5.85309 9.74326 5.20276 6.18082 8.06729 4.55243 6.5036 8.71753 6.5036 5.85309 6.5036 4.55243 5.85309 6.5036 3.2518 8.71753 5.20276 5.85309 6.18082 4.55246 4.55243 3.2518 6.5036 6.5036 4.55243 3.2518 5.85309 6.5036 8.13181 5.20276 5.85309 10.0184 6.82639 8.71756 4.61703 6.5036 3.2518 3.25177 8.0672 6.5036 10.0184 3.2518 10.0303 4.55246 6.5036 0 ]xsh10.8741 -55.0931 mo(hadronicvacuumpolarisation\(HVP\),displayedontheleft-handsideof\014gure1,andin)[6.50359 5.8531 6.50359 4.55244 5.85309 6.5036 3.25179 9.41093 5.53278 5.85309 5.20277 6.50359 6.5036 13.9634 6.83833 5.84113 3.2518 5.85309 4.55244 3.2518 4.61702 5.8531 4.55243 3.2518 5.85309 10.7237 4.55246 8.7749 8.77487 7.96442 4.55243 7.45996 6.5036 3.2518 4.61703 6.5036 3.25177 5.5303 5.85556 5.20276 10.7118 5.85309 10.7237 4.55246 6.50357 9.41092 3.2518 5.20276 3.57687 4.55243 3.90213 6.5036 5.85309 6.5036 10.7237 4.61703 3.2518 6.5036 9.41089 5.85309 7.797 6.5036 5.85306 6.5036 4.55243 9.41089 5.85309 7.54376 5.85309 6.5036 10.7237 3.25177 0 ]xsh10.8741 -40.6471 mo(hadroniclight-by-lightscattering\(HLbL\),displayedinthemiddleof\014gure1.Themost)[6.50359 5.8531 6.50359 4.55244 5.85309 6.5036 3.25179 9.29137 3.2518 3.2518 5.85309 6.1808 4.55246 3.90211 6.1808 6.17834 3.90213 3.2518 3.2518 5.85309 6.16885 8.65302 4.61702 5.20277 5.85309 4.55243 4.55246 5.20276 4.55246 3.2518 6.50357 9.94174 4.55243 8.7749 7.31409 6.5036 7.31409 4.55243 7.34045 6.5036 3.2518 4.617 6.5036 3.2518 5.5303 5.85556 5.20276 10.5923 3.2518 10.5921 4.55246 6.5036 9.30341 9.75519 3.2518 6.5036 6.5036 3.2518 9.29141 5.85309 7.66541 6.5036 5.85309 6.50357 4.55246 9.30341 5.85309 9.026 8.45456 6.5036 9.29141 9.75519 5.85309 4.617 0 ]xsh10.8741 -26.201 mo(importantcontributiontothelattercomesfromthepseudoscalarpolecontributions;one)[3.2518 9.75521 6.82638 5.85309 4.55244 4.55244 5.8531 6.18081 8.21067 5.20277 5.85309 6.18082 4.55243 4.5405 3.2518 6.5036 6.50359 4.55244 3.2518 5.85309 10.1618 4.55244 9.51131 4.55246 6.5036 8.86099 3.2518 5.85309 4.55243 4.55246 5.20276 8.21066 5.20276 5.85309 9.75522 5.20276 8.27524 3.57687 4.55246 5.85309 13.4134 4.55246 6.5036 8.86099 6.5036 4.617 5.20279 6.50357 6.5036 5.85309 4.61703 5.20276 5.85309 3.2518 5.85309 8.21066 6.82639 5.85312 3.25177 8.86102 5.20276 5.85309 6.18082 4.55243 4.55243 3.2518 6.49167 6.5036 4.55243 3.2518 5.85309 6.5036 4.617 6.99371 5.85309 6.5036 0 ]xsh10.8741 -11.755 mo(exampleisprovidedontheright-handsideof\014gure1.)[5.20277 6.17834 5.85309 9.75521 6.50359 3.2518 9.1001 3.2518 8.52631 6.5036 4.55244 5.51834 6.17834 3.2518 6.5036 5.20276 10.4129 5.85309 10.4009 4.55246 6.5036 9.1001 4.55243 3.2518 5.85309 6.18079 4.55246 3.90213 6.50357 5.85309 6.5036 10.4009 4.617 3.2518 6.5036 9.11206 5.85309 7.47418 6.5036 5.85309 6.5036 4.55246 9.1001 5.85309 0 ]xshgsave
10.8741 104.336 mo
124.261 104.336 li
124.261 9.36234 li
10.8741 9.36234 li
cp
clp
.436104 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
66.301 12.9999 mo
67.2701 13.5596 67.2701 14.9585 66.301 15.5182 cv
65.3314 16.0778 65.3314 17.4768 66.301 18.0364 cv
67.2701 18.5961 67.2701 19.995 66.301 20.5547 cv
65.3318 21.1139 65.3318 22.5128 66.301 23.0725 cv
67.2701 23.6321 67.2701 25.0311 66.301 25.5907 cv
65.3318 26.1504 65.3318 27.5493 66.301 28.109 cv
67.2701 28.6686 67.2701 30.0671 66.301 30.6268 cv
65.3314 31.1864 65.3314 32.5858 66.301 33.1455 cv
67.2701 33.7047 67.2701 35.1036 66.301 35.6633 cv
65.3318 36.2229 65.3318 37.6219 66.301 38.181 cv
67.2701 38.7407 67.2701 40.1401 66.301 40.6993 cv
65.3318 41.2595 65.3318 42.6579 66.301 43.2176 cv
/1 
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
@
121.243 84.4241 mo
104.761 84.4241 li
@
114.646 83.0022 mo
109.339 84.4241 li
114.646 85.8461 li
f
27.8405 84.4241 mo
11.3586 84.4241 li
@
21.2439 83.0022 mo
15.9368 84.4241 li
21.2439 85.8461 li
f
27.8405 84.4241 mo
28.3748 83.4989 29.7102 83.4989 30.2444 84.4241 cv
30.7785 85.3495 32.1139 85.3495 32.648 84.4241 cv
33.1822 83.4989 34.5177 83.4989 35.0519 84.4241 cv
35.5861 85.3493 36.9215 85.3493 37.4556 84.4241 cv
37.9898 83.4989 39.3251 83.4989 39.8593 84.4241 cv
40.3936 85.3495 41.729 85.3495 42.2632 84.4241 cv
42.7973 83.4989 44.1327 83.4989 44.6669 84.4241 cv
45.201 85.3493 46.5366 85.3493 47.0707 84.4241 cv
@
104.761 84.4241 mo
66.301 43.2176 li
@
87.6919 64.0523 mo
83.0314 61.1428 li
85.6131 65.993 li
f
104.761 84.4241 mo
104.227 85.3493 102.891 85.3493 102.357 84.4241 cv
101.823 83.4989 100.488 83.4989 99.9532 84.4241 cv
99.4192 85.3493 98.0837 85.3493 97.5498 84.4241 cv
97.0153 83.4989 95.6798 83.4989 95.1459 84.4241 cv
94.6119 85.3493 93.2759 85.3493 92.742 84.4241 cv
92.208 83.4989 90.8725 83.4989 90.3385 84.4241 cv
89.8041 85.3493 88.4686 85.3493 87.9346 84.4241 cv
87.4002 83.4989 86.0647 83.4989 85.5307 84.4241 cv
@
66.301 43.2176 mo
27.8405 84.4241 li
@
47.1528 61.6488 mo
44.5711 66.499 li
49.2319 63.5893 li
f
gsave
85.5307 84.4241 mo
85.5307 79.3239 83.5043 74.4329 79.8982 70.8267 cv
76.2921 67.2205 71.401 65.1941 66.301 65.1941 cv
61.2005 65.1941 56.3095 67.2205 52.7033 70.8267 cv
49.0969 74.4329 47.0707 79.3239 47.0707 84.4241 cv
47.0707 89.5244 49.0969 94.4153 52.7033 98.0217 cv
56.3095 101.628 61.2005 103.654 66.301 103.654 cv
71.401 103.654 76.2921 101.628 79.8982 98.0217 cv
83.5043 94.4153 85.5307 89.5244 85.5307 84.4241 cv
cp
clp
47.0707 103.654 mo
85.5308 103.654 li
85.5308 65.1941 li
47.0707 65.1941 li
cp
0 0 0 0 cmyk
f
45.617 105.108 mo
86.9844 63.7404 li
.75021 .679683 .670222 .90164 cmyk
@
45.617 105.108 mo
86.9844 63.7404 li
@
45.617 103.654 mo
85.5307 63.7404 li
@
47.0705 105.108 mo
86.9844 65.194 li
@
45.617 102.201 mo
84.077 63.7404 li
@
48.5242 105.108 mo
86.9844 66.6477 li
@
45.617 100.747 mo
82.6234 63.7404 li
@
49.9779 105.108 mo
86.9844 68.1014 li
@
45.617 99.2935 mo
81.1697 63.7404 li
@
51.4316 105.108 mo
86.9844 69.5549 li
@
45.617 97.8398 mo
79.716 63.7404 li
@
52.8852 105.108 mo
86.9844 71.0086 li
@
45.617 96.3861 mo
78.2623 63.7404 li
@
54.3387 105.108 mo
86.9844 72.4622 li
@
45.617 94.9324 mo
76.8091 63.7404 li
@
55.7924 105.108 mo
86.9844 73.9159 li
@
45.617 93.4787 mo
75.3555 63.7404 li
@
57.2461 105.108 mo
86.9844 75.3696 li
@
45.617 92.0253 mo
73.9018 63.7404 li
@
58.6998 105.108 mo
86.9844 76.8231 li
@
45.617 90.5716 mo
72.4481 63.7404 li
@
60.1534 105.108 mo
86.9844 78.2768 li
@
45.617 89.1179 mo
70.9944 63.7404 li
@
61.607 105.108 mo
86.9844 79.7305 li
@
45.617 87.6642 mo
69.5407 63.7404 li
@
63.0607 105.108 mo
86.9844 81.1841 li
@
45.617 86.2105 mo
68.0871 63.7404 li
@
64.5144 105.108 mo
86.9844 82.6376 li
@
45.617 84.757 mo
66.6334 63.7404 li
@
65.9681 105.108 mo
86.9844 84.0913 li
@
45.617 83.3033 mo
65.1797 63.7404 li
@
67.4218 105.108 mo
86.9844 85.545 li
@
45.617 81.8496 mo
63.7265 63.7404 li
@
68.8749 105.108 mo
86.9844 86.9987 li
@
45.617 80.396 mo
62.2728 63.7404 li
@
70.3286 105.108 mo
86.9844 88.4523 li
@
45.617 78.9423 mo
60.8191 63.7404 li
@
71.7823 105.108 mo
86.9844 89.9058 li
@
45.617 77.4888 mo
59.3655 63.7404 li
@
73.236 105.108 mo
86.9844 91.3595 li
@
45.617 76.0351 mo
57.9116 63.7404 li
@
74.6897 105.108 mo
86.9844 92.8132 li
@
45.617 74.5814 mo
56.4581 63.7404 li
@
76.1433 105.108 mo
86.9844 94.2669 li
@
45.617 73.1278 mo
55.0044 63.7404 li
@
77.597 105.108 mo
86.9844 95.7205 li
@
45.617 71.6743 mo
53.5507 63.7404 li
@
79.0507 105.108 mo
86.9844 97.174 li
@
45.617 70.2206 mo
52.0971 63.7404 li
@
80.5044 105.108 mo
86.9844 98.6277 li
@
45.617 68.7669 mo
50.6434 63.7404 li
@
81.9581 105.108 mo
86.9844 100.081 li
@
45.617 67.3132 mo
49.1899 63.7404 li
@
83.4117 105.108 mo
86.9844 101.535 li
@
grestore
85.5307 84.4241 mo
85.5307 79.3239 83.5043 74.4329 79.8982 70.8267 cv
76.2921 67.2205 71.401 65.1941 66.301 65.1941 cv
61.2005 65.1941 56.3095 67.2205 52.7033 70.8267 cv
49.097 74.4329 47.0707 79.3239 47.0707 84.4241 cv
47.0707 89.5244 49.097 94.4153 52.7033 98.0217 cv
56.3095 101.628 61.2005 103.654 66.301 103.654 cv
71.401 103.654 76.2921 101.628 79.8982 98.0217 cv
83.5043 94.4153 85.5307 89.5244 85.5307 84.4241 cv
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PUGQMX+CMMI12 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /PUGQMX+CMMI12 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI12.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 13 /gamma putdup 22 /mu putdef/UniqueID 5087386 def/FontBBox {-31 -250 1026 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-21 0 431 441 452 463 683 704] def/OtherBlues [-204 -194] def/BlueScale 0.0437899 def/StdHW [22] def/StdVW [65] def/StemSnapH [22 29] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/gamma <1C60D8A8C9B7A08609F0BE3386DB25AA3C40F69716938B3CD608B8F4AC3CEB11F3463C0A39522D481E09FA2BAC303604566E11A733A443F6D4DAE2B4D699CE4FC228D342E5BB9DFAF924011D955409F8F13B245291EF956CE998387591B378F72CC874BF1490A1739EFD80F9DEEFD53CE9050D7A6FBF75BC130439CB3672C5F4D4464673665ADEF12BAB675322E2CA31AEF558DBE2ADB50892A3991F71DB17AEF27E29640D3AD6B7A552698841A7258BDE94F0E078A9FB94964BB7> |-/mu <1C60D8A8C9B7CEAE09C95C7D671BDB7A00D6066DD72F05A445B16DFF470D955EBEF4CABBC29886504C0F82C5DD6D2433D7731827CD330A39FDB639CCB875D1F0D6D1E5231C2EFFDA1CE832DDF6019A77D032ECA43A1341120B8377319B72030F1B25943BAE2ED4A2428E73CB6809190CB8B96CB5FA873B75B7B152E54E9782187992A72B1C1A3C693E96AC9701497E728FF7A6FF215D03FDD315F2B520FF04945D480FE1332E5D1CBFA0DE96A6602E88B2525411BF9B82D9413F1A8823AAFD00826974D33F7C53D326554D2206E1844D450C010B2807B003C89981A48335B01E941ECD> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PTEMED+CMMI12 /PUGQMX+CMMI12 findfont ct_VMDictPut/PTEMED+CMMI12*1 [13{/.notdef}rp /gamma 8{/.notdef}rp /mu 233{/.notdef}rp]PTEMED+CMMI12 nfPTEMED+CMMI12*1 [10.0125 0 0 -10.0125 0 0 ]msf69.6221 14.1498 mo(\015)sh118.349 93.1137 mo(\026)sh%ADOBeginSubsetFont: EVKAAA+CMR17 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /EVKAAA+CMR17 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR17.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 97 /a putdup 99 /c putdup 100 /d putdup 104 /h putdup 105 /i putdup 110 /n putdup 111 /o putdup 114 /r putdef/UniqueID 5000795 def/FontBBox {-33 -250 945 749} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-16 0 430 442 661 669 683 699] def/OtherBlues [-204 -195] def/BlueScale 0.0479599 def/StdHW [26] def/StdVW [53] def/StemSnapH [16 26] def/StemSnapV [53 66] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings9 dict dup begin/a <1C60D8A8C9B771A880706B92B3AFBDE43842B9327D228DD93CE826C8543FBBCF14E78A0F96F9F749E030C8AEFA58B8107DA5B93F5DB86D79C4256290A2DE870FF1A8921A6C4FFC13E24C7A515E9B411434066E216E3D4D2992E4089C587017BF032AA672FF09423D82141896AC2943E07AE0D5DBCB55A30DD054AAE43006C496CDBB1FBB2F2DEA9ADA416F9EEDC7B232D0846C2B8EC59A65F6AEA7B4B9D383BE376F1CB74596BD6BE86D663F907D99727CD8> |-/c <1C60D8A8C9B70582B8160163538EDBE610B50EF0FC18B9D92BA19D6D2BC8296AA3FB80F6B9CA8EFD1B3A7EE7A4F3864201D24C87587586F1629F73B87A7D1BFBCC20570D7D8B6D6B8017A1A1B2C0C88B84AD8C46DE88B5607801C1A692ACBFC0086CF1EB7A7EEB838D7477768408> |-/d <1C60D8A8C9B7BDE3EEA1FC484CB410BBA321606D0A5DC50E93B52170EB6A643700D50BC2910DAAF5DCCBDA24C8ED2189CCF1F5E2D4BF645521E9465728F4B6E4BD3207A19350C51A26C61CB937154819249F2E363EBBCAE923840567E832CE665D71B6F1D9E2BC7233616092C093564A7E227BE4C583DACCD606BA80CAC2CBE9F86F17> |-/h <1C60D8A8C9B7BDE3E6632AF706EC048FDF92A82B8A451AE8DF9298AFED266375AA9D52328081C7CAE1742A58BBEDBF811C0E52139B809DBBC9146EDDB61201A1F64A57841B1B9B6274C6227B039418A4FA859FBC7D8020D197F86D5992470094A4B2839BEE21110C7EEFE5B5372D540FE15F0165327FFA1D60C8D4D3E05C2D4F4B245319810DB64C70503658AAC0433B99932B1D793AB9F66ADCAF73A61A445F7B43BE6A9793AF5B77E8930DE10AA35A606A2D8DEC055A06AF> |-/i <1C60D8A8C9B873D03D58E86E4D65865714EC9BBF75C4D60EA800932E8CBFDD8685211887749A07F307BD24600512D48D3B8395F221C938F9732C285A5EC8449787F472D80559A3585906EA46D747DB9ADA4C1832C489291141EAF62AE402D2A1953403C193492DA12A9034C2828588269A3C88104D09676C> |-/n <1C60D8A8C9B7BDE3E6632AF706EC048678A41D4328086F0AA7F33A48F7A5FF34D5B43ED856931E33CA603980808337F95150B7A79F8444217DFF1DCDAA213869171C98EB9B96558B4A67441A84A9A4D04633602A2D8879D744843DC34426A17EA8AF79D46447D37E91BCECEDE9A2BA7E5432CC1C47EE86FBF0561B1EAD9AD303E8AA40A277AAB9C55ACD210075A4CE0B6051E65933B215DF5DCE17627A2EE1809FC477BD4D1B5F4DC70A052A887FAC20F55A4ACA> |-/o <1C60D8A8C9B771A8807641DEB1E85D2706F3E3952019404FE40D001E1FFBE6A3EE543DD2DB19529DDEBF8313DCAF43340BB2CDE2C338C68D92E731143267E1C24F031E495E7A41AE67F327C5663E8722C3988FD37ECC0F17970A66CBA768BC3C248D204D9E43D8ED99B5C875B4C86448E51103A4C76DD1> |-/r <1C60D8A8C9B808988F53F26F0A645AA0E1C2BB347B511826346E80A5916D3FC8135C75566D5F728CCDE1DD2882874CDE228E2B7F551B7476DF392CD6AA360901EB2FA1219B70FADB9584C0CE36BE486CBFB249BD040E8C594E5E333C4980598177F65C6549A40F32C213B900740A8967D6613961CB7A44B60EBC91A0BB94BA87135CEFE64F091057EC1BF0> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PTEMEE+CMR17 /EVKAAA+CMR17 findfont ct_VMDictPut/PTEMEE+CMR17*1 [97{/.notdef}rp /a /.notdef /c /d 3{/.notdef}rp /h /i 4{/.notdef}rp /n /o 2{/.notdef}rp /r 141{/.notdef}rp]PTEMEE+CMR17 nfPTEMEE+CMR17*1 [10.0125 0 0 -10.0125 0 0 ]msf48.9799 87.8804 mo(h)sh54.0983 87.8804 mo(adronic)[4.59572 5.11639 3.54445 4.59571 5.11639 2.50311 0 ]xshgrestore
gsave
180.953 104.336 mo
294.34 104.336 li
294.34 4.51675 li
180.953 4.51675 li
cp
clp
.436104 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
236.38 8.15431 mo
237.437 8.76486 237.437 10.2912 236.38 10.9018 cv
235.323 11.5118 235.323 13.0382 236.38 13.6487 cv
237.437 14.2588 237.437 15.7852 236.38 16.3957 cv
235.323 17.0063 235.323 18.5321 236.38 19.1427 cv
237.437 19.7532 237.437 21.2796 236.38 21.8901 cv
235.323 22.5002 235.323 24.0266 236.38 24.6371 cv
237.437 25.2472 237.437 26.7735 236.38 27.3841 cv
235.323 27.9946 235.323 29.5205 236.38 30.1311 cv
.75021 .679683 .670222 .90164 cmyk
@
291.322 93.314 mo
274.84 93.314 li
@
284.725 91.8922 mo
279.418 93.314 li
284.725 94.7361 li
f
197.92 93.314 mo
181.438 93.314 li
@
191.323 91.8922 mo
186.016 93.314 li
191.323 94.7361 li
f
197.92 93.314 mo
197.601 92.27 198.532 91.2723 199.596 91.5184 cv
200.659 91.7644 201.59 90.7667 201.272 89.7226 cv
200.953 88.6784 201.884 87.6808 202.948 87.9269 cv
204.011 88.173 204.943 87.1751 204.624 86.1308 cv
204.305 85.0866 205.237 84.089 206.3 84.3351 cv
207.364 84.5812 208.295 83.5835 207.976 82.5392 cv
207.657 81.4951 208.589 80.4974 209.652 80.7435 cv
210.716 80.9895 211.647 79.992 211.328 78.9478 cv
211.01 77.9037 211.941 76.906 213.004 77.1521 cv
214.068 77.3981 214.999 76.4004 214.68 75.3564 cv
214.362 74.3119 215.293 73.314 216.357 73.5603 cv
217.42 73.8063 218.352 72.8086 218.033 71.7645 cv
217.714 70.7203 218.645 69.7226 219.709 69.9689 cv
220.773 70.2149 221.704 69.2172 221.385 68.1729 cv
@
236.38 93.314 mo
197.92 93.314 li
@
218.794 91.8922 mo
213.487 93.314 li
218.794 94.7361 li
f
236.38 93.314 mo
235.454 92.7799 235.454 91.4445 236.38 90.9104 cv
237.305 90.3762 237.305 89.0407 236.38 88.5065 cv
235.454 87.9724 235.454 86.6369 236.38 86.1028 cv
237.305 85.5686 237.305 84.2333 236.38 83.6991 cv
235.454 83.165 235.454 81.8294 236.38 81.2953 cv
237.305 80.7611 237.305 79.4257 236.38 78.8916 cv
235.454 78.3574 235.454 77.0219 236.38 76.4877 cv
237.305 75.9536 237.305 74.6182 236.38 74.084 cv
@
274.84 93.314 mo
236.38 93.314 li
@
257.254 91.8922 mo
251.947 93.314 li
257.254 94.7361 li
f
274.84 93.314 mo
273.776 93.5601 272.845 92.5626 273.164 91.5184 cv
273.482 90.4743 272.551 89.4766 271.488 89.7226 cv
270.424 89.9687 269.493 88.971 269.812 87.9269 cv
270.131 86.8825 269.199 85.8846 268.135 86.1308 cv
267.072 86.3769 266.141 85.3792 266.459 84.3351 cv
266.778 83.2909 265.847 82.2932 264.783 82.5392 cv
263.719 82.7853 262.788 81.7878 263.107 80.7435 cv
263.426 79.6994 262.495 78.7017 261.431 78.9478 cv
260.368 79.1939 259.436 78.1962 259.755 77.1521 cv
260.074 76.108 259.143 75.1103 258.079 75.3564 cv
257.015 75.6025 256.084 74.6046 256.402 73.5603 cv
256.721 72.516 255.79 71.5185 254.726 71.7645 cv
253.663 72.0107 252.732 71.0129 253.05 69.9689 cv
253.369 68.9246 252.438 67.9269 251.374 68.1729 cv
@
gsave
258.356 52.1073 mo
258.356 46.279 256.04 40.6891 251.919 36.5679 cv
247.798 32.4468 242.208 30.1311 236.38 30.1311 cv
230.551 30.1311 224.962 32.4468 220.84 36.5679 cv
216.719 40.6891 214.403 46.279 214.403 52.1073 cv
214.403 57.9363 216.719 63.5257 220.84 67.6469 cv
224.962 71.7682 230.551 74.084 236.38 74.084 cv
242.208 74.084 247.798 71.7682 251.919 67.6469 cv
256.04 63.5257 258.356 57.9363 258.356 52.1073 cv
cp
clp
214.403 74.084 mo
258.356 74.084 li
258.356 30.1311 li
214.403 30.1311 li
cp
0 0 0 0 cmyk
f
212.95 75.5377 mo
259.81 28.6774 li
.75021 .679683 .670222 .90164 cmyk
@
212.95 75.5377 mo
259.81 28.6774 li
@
212.95 74.0836 mo
258.356 28.6774 li
@
214.404 75.5377 mo
259.81 30.1315 li
@
212.95 72.6296 mo
256.902 28.6774 li
@
215.857 75.5377 mo
259.81 31.5852 li
@
212.95 71.1757 mo
255.448 28.6774 li
@
217.312 75.5377 mo
259.81 33.0394 li
@
212.95 69.7216 mo
253.994 28.6774 li
@
218.766 75.5377 mo
259.81 34.4935 li
@
212.95 68.2676 mo
252.54 28.6774 li
@
220.22 75.5377 mo
259.81 35.9472 li
@
212.95 66.8136 mo
251.086 28.6774 li
@
221.674 75.5377 mo
259.81 37.4014 li
@
212.95 65.3597 mo
249.632 28.6774 li
@
223.128 75.5377 mo
259.81 38.8556 li
@
212.95 63.9056 mo
248.178 28.6774 li
@
224.582 75.5377 mo
259.81 40.3092 li
@
212.95 62.4515 mo
246.724 28.6774 li
@
226.036 75.5377 mo
259.81 41.7634 li
@
212.95 60.9975 mo
245.27 28.6774 li
@
227.49 75.5377 mo
259.81 43.2176 li
@
212.95 59.5436 mo
243.816 28.6774 li
@
228.944 75.5377 mo
259.81 44.6712 li
@
212.95 58.0896 mo
242.362 28.6774 li
@
230.398 75.5377 mo
259.81 46.1254 li
@
212.95 56.6355 mo
240.908 28.6774 li
@
231.852 75.5377 mo
259.81 47.5796 li
@
212.95 55.1814 mo
239.454 28.6774 li
@
233.305 75.5377 mo
259.81 49.0337 li
@
212.95 53.7277 mo
238 28.6774 li
@
234.76 75.5377 mo
259.81 50.4874 li
@
212.95 52.2735 mo
236.546 28.6774 li
@
236.214 75.5377 mo
259.81 51.9416 li
@
212.95 50.8193 mo
235.092 28.6774 li
@
237.668 75.5377 mo
259.81 53.3957 li
@
212.95 49.3652 mo
233.638 28.6774 li
@
239.122 75.5377 mo
259.81 54.8494 li
@
212.95 47.9115 mo
232.184 28.6774 li
@
240.576 75.5377 mo
259.81 56.3035 li
@
212.95 46.4573 mo
230.729 28.6774 li
@
242.03 75.5377 mo
259.81 57.7576 li
@
212.95 45.0037 mo
229.276 28.6774 li
@
243.484 75.5377 mo
259.81 59.2116 li
@
212.95 43.5495 mo
227.822 28.6774 li
@
244.938 75.5377 mo
259.81 60.6657 li
@
212.95 42.0953 mo
226.368 28.6774 li
@
246.392 75.5377 mo
259.81 62.1196 li
@
212.95 40.6416 mo
224.914 28.6774 li
@
247.846 75.5377 mo
259.81 63.5736 li
@
212.95 39.1875 mo
223.46 28.6774 li
@
249.3 75.5377 mo
259.81 65.0277 li
@
212.95 37.7333 mo
222.006 28.6774 li
@
250.754 75.5377 mo
259.81 66.4817 li
@
212.95 36.2796 mo
220.552 28.6774 li
@
252.208 75.5377 mo
259.81 67.9356 li
@
212.95 34.8255 mo
219.098 28.6774 li
@
253.662 75.5377 mo
259.81 69.3897 li
@
212.95 33.3713 mo
217.644 28.6774 li
@
255.116 75.5377 mo
259.81 70.8437 li
@
212.95 31.9171 mo
216.189 28.6774 li
@
256.57 75.5377 mo
259.81 72.2978 li
@
grestore
258.356 52.1073 mo
258.356 46.279 256.04 40.6891 251.919 36.5679 cv
247.798 32.4468 242.208 30.1311 236.38 30.1311 cv
230.551 30.1311 224.962 32.4468 220.84 36.5679 cv
216.719 40.6891 214.403 46.279 214.403 52.1073 cv
214.403 57.9363 216.719 63.5257 220.84 67.6469 cv
224.962 71.7682 230.551 74.084 236.38 74.084 cv
242.208 74.084 247.798 71.7682 251.919 67.6469 cv
256.04 63.5257 258.356 57.9363 258.356 52.1073 cv
cp
@
1 /0 /CSD get_res sepcs
1 sep
PTEMED+CMMI12*1 [10.0125 0 0 -10.0125 0 0 ]msf239.701 9.30418 mo(\015)sh288.428 101.991 mo(\026)shPTEMEE+CMR17*1 [10.0125 0 0 -10.0125 0 0 ]msf219.059 55.5894 mo(h)sh224.177 55.5894 mo(adronic)[4.59572 5.11639 3.54445 4.5957 5.11639 2.50311 0 ]xshgrestore
gsave
350.425 104.494 mo
464.404 104.494 li
464.404 1.79498 li
350.425 1.79498 li
cp
clp
.436104 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
406.458 8.15431 mo
407.515 8.76486 407.515 10.2912 406.458 10.9018 cv
405.401 11.5118 405.401 13.0382 406.458 13.6483 cv
407.515 14.2588 407.515 15.7852 406.458 16.3957 cv
405.401 17.0063 405.401 18.5321 406.458 19.1427 cv
407.515 19.7532 407.515 21.2791 406.458 21.8896 cv
405.401 22.4997 405.401 24.0261 406.458 24.6366 cv
.75021 .679683 .670222 .90164 cmyk
@
461.4 93.314 mo
444.918 93.314 li
@
454.803 91.8922 mo
449.496 93.314 li
454.803 94.7361 li
f
367.998 93.314 mo
351.516 93.314 li
@
361.401 91.8922 mo
356.094 93.314 li
361.401 94.7361 li
f
367.998 93.314 mo
367.57 92.4209 368.27 91.4 369.258 91.4767 cv
370.245 91.5533 370.945 90.5328 370.518 89.6393 cv
370.09 88.7461 370.79 87.7253 371.777 87.802 cv
372.765 87.8788 373.465 86.8581 373.037 85.9648 cv
372.61 85.0714 373.31 84.0508 374.298 84.1275 cv
375.285 84.2041 375.985 83.1833 375.557 82.2901 cv
375.13 81.3969 375.83 80.3761 376.817 80.4528 cv
377.805 80.5294 378.505 79.5086 378.077 78.6154 cv
@
406.458 93.314 mo
367.998 93.314 li
@
388.872 91.8922 mo
383.565 93.314 li
388.872 94.7361 li
f
406.458 93.314 mo
405.381 93.7651 404.22 92.8815 404.368 91.7237 cv
404.515 90.5659 403.354 89.6825 402.278 90.1335 cv
401.201 90.5846 400.04 89.7011 400.188 88.5432 cv
400.335 87.3854 399.174 86.502 398.098 86.9531 cv
397.021 87.4041 395.86 86.5206 396.008 85.3627 cv
396.155 84.2047 394.994 83.3212 393.918 83.7722 cv
392.841 84.2233 391.68 83.3399 391.828 82.1821 cv
391.975 81.0242 390.814 80.1406 389.738 80.5917 cv
388.661 81.0428 387.5 80.1594 387.648 79.0015 cv
387.795 77.8437 386.634 76.9601 385.557 77.4112 cv
@
444.918 93.314 mo
406.458 93.314 li
@
427.332 91.8922 mo
422.025 93.314 li
427.332 94.7361 li
f
444.918 93.314 mo
443.747 93.3413 442.987 92.0913 443.548 91.0641 cv
444.11 90.0374 443.349 88.788 442.179 88.815 cv
441.009 88.8423 440.248 87.5923 440.81 86.565 cv
441.371 85.5384 440.611 84.2889 439.441 84.316 cv
438.27 84.3432 437.51 83.0932 438.071 82.066 cv
438.633 81.039 437.872 79.789 436.701 79.8162 cv
435.532 79.8433 434.771 78.5938 435.332 77.5672 cv
435.894 76.5399 435.133 75.2899 433.963 75.3172 cv
432.793 75.3443 432.032 74.0943 432.593 73.0672 cv
433.155 72.0406 432.394 70.7909 431.224 70.8182 cv
430.054 70.8452 429.293 69.5954 429.855 68.5682 cv
430.416 67.5415 429.656 66.2921 428.486 66.3192 cv
427.315 66.3462 426.555 65.0964 427.116 64.0692 cv
427.678 63.0421 426.917 61.7921 425.747 61.8191 cv
424.577 61.8464 423.816 60.597 424.377 59.5701 cv
424.94 58.5431 424.178 57.2931 423.008 57.3202 cv
421.838 57.3474 421.078 56.0979 421.639 55.0709 cv
422.201 54.0441 421.44 52.7939 420.269 52.8211 cv
419.099 52.8482 418.338 51.5985 418.9 50.5713 cv
419.461 49.5445 418.701 48.2948 417.531 48.3224 cv
416.36 48.3495 415.6 47.0994 416.161 46.0721 cv
416.723 45.0448 415.962 43.7952 414.792 43.8223 cv
413.622 43.8494 412.861 42.5998 413.423 41.5735 cv
413.984 40.5462 413.223 39.296 412.053 39.3232 cv
410.883 39.3503 410.123 38.1011 410.684 37.0743 cv
411.246 36.0471 410.485 34.7969 409.314 34.824 cv
@
383.924 69.321 mo
384.913 67.5994 li
@
385.903 65.8779 mo
386.893 64.1572 li
@
387.883 62.4356 mo
388.872 60.7142 li
@
389.862 58.9928 mo
390.852 57.2713 li
@
391.842 55.5506 mo
392.831 53.8289 li
@
393.821 52.1073 mo
394.811 50.3861 li
@
395.801 48.6645 mo
396.791 46.9433 li
@
397.78 45.2222 mo
398.77 43.5006 li
@
399.76 41.7794 mo
400.75 40.0577 li
@
401.739 38.3371 mo
402.729 36.6154 li
@
gsave
411.952 30.1311 mo
411.952 28.674 411.373 27.2765 410.343 26.2459 cv
409.313 25.2152 407.915 24.6366 406.458 24.6366 cv
405 24.6366 403.603 25.2152 402.573 26.2459 cv
401.542 27.2765 400.963 28.674 400.963 30.1311 cv
400.963 31.5881 401.542 32.9856 402.573 34.0163 cv
403.603 35.0464 405 35.6255 406.458 35.6255 cv
407.915 35.6255 409.313 35.0464 410.343 34.0163 cv
411.373 32.9856 411.952 31.5881 411.952 30.1311 cv
cp
clp
400.963 35.6255 mo
411.952 35.6255 li
411.952 24.6366 li
400.963 24.6366 li
cp
0 0 0 0 cmyk
f
399.509 37.0792 mo
413.406 23.1829 li
.75021 .679683 .670222 .90164 cmyk
@
399.509 37.0792 mo
413.406 23.1829 li
@
399.509 35.6255 mo
411.952 23.1829 li
@
400.963 37.0792 mo
413.406 24.6361 li
@
399.509 34.1718 mo
410.499 23.1829 li
@
402.417 37.0792 mo
413.406 26.0898 li
@
399.509 32.7181 mo
409.045 23.1829 li
@
403.87 37.0792 mo
413.406 27.5435 li
@
399.509 31.2649 mo
407.591 23.1829 li
@
405.324 37.0792 mo
413.406 28.9972 li
@
399.509 29.8112 mo
406.138 23.1829 li
@
406.778 37.0792 mo
413.406 30.4509 li
@
399.509 28.3576 mo
404.684 23.1829 li
@
408.231 37.0792 mo
413.406 31.9045 li
@
399.509 26.9039 mo
403.231 23.1829 li
@
409.685 37.0792 mo
413.406 33.3582 li
@
grestore
411.952 30.1311 mo
411.952 28.674 411.373 27.2765 410.343 26.2458 cv
409.313 25.2152 407.915 24.6366 406.458 24.6366 cv
405 24.6366 403.603 25.2152 402.573 26.2458 cv
401.542 27.2765 400.963 28.674 400.963 30.1311 cv
400.963 31.5881 401.542 32.9856 402.573 34.0163 cv
403.603 35.0464 405 35.6255 406.458 35.6255 cv
407.915 35.6255 409.313 35.0464 410.343 34.0163 cv
411.373 32.9856 411.952 31.5881 411.952 30.1311 cv
cp
@
gsave
386.679 74.084 mo
386.679 72.6267 386.1 71.2293 385.07 70.1988 cv
384.04 69.1684 382.642 68.5896 381.185 68.5896 cv
379.727 68.5896 378.33 69.1684 377.3 70.1988 cv
376.269 71.2293 375.69 72.6267 375.69 74.084 cv
375.69 75.5413 376.269 76.9388 377.3 77.9692 cv
378.33 78.9997 379.727 79.5785 381.185 79.5785 cv
382.642 79.5785 384.04 78.9997 385.07 77.9692 cv
386.1 76.9388 386.679 75.5413 386.679 74.084 cv
cp
clp
375.69 79.5785 mo
386.679 79.5785 li
386.679 68.5896 li
375.69 68.5896 li
cp
0 0 0 0 cmyk
f
374.237 81.0321 mo
388.133 67.1359 li
.75021 .679683 .670222 .90164 cmyk
@
374.237 81.0321 mo
388.133 67.1359 li
@
374.237 79.5787 mo
386.679 67.1359 li
@
375.69 81.0321 mo
388.133 68.5894 li
@
374.237 78.125 mo
385.226 67.1359 li
@
377.144 81.0321 mo
388.133 70.043 li
@
374.237 76.6713 mo
383.772 67.1359 li
@
378.597 81.0321 mo
388.133 71.4967 li
@
374.237 75.2178 mo
382.319 67.1359 li
@
380.051 81.0321 mo
388.133 72.9502 li
@
374.237 73.7641 mo
380.865 67.1359 li
@
381.505 81.0321 mo
388.133 74.4039 li
@
374.237 72.3104 mo
379.411 67.1359 li
@
382.958 81.0321 mo
388.133 75.8576 li
@
374.237 70.857 mo
377.958 67.1359 li
@
384.412 81.0321 mo
388.133 77.3111 li
@
grestore
386.679 74.084 mo
386.679 72.6267 386.1 71.2293 385.07 70.1988 cv
384.04 69.1684 382.642 68.5896 381.185 68.5896 cv
379.727 68.5896 378.33 69.1684 377.3 70.1988 cv
376.269 71.2293 375.69 72.6267 375.69 74.084 cv
375.69 75.5413 376.269 76.9388 377.3 77.9692 cv
378.33 78.9997 379.727 79.5785 381.185 79.5785 cv
382.642 79.5785 384.04 78.9997 385.07 77.9692 cv
386.1 76.9388 386.679 75.5413 386.679 74.084 cv
cp
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XDNQMX+CMMI12 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.13 dict dup begin/FontType 1 def/FontName /XDNQMX+CMMI12 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI12.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 13 /gamma putdup 22 /mu putdef/UniqueID 5087386 def/FontBBox {-31 -250 1026 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-21 0 431 441 452 463 683 704] def/OtherBlues [-204 -194] def/BlueScale 0.0437899 def/StdHW [22] def/StdVW [65] def/StemSnapH [22 29] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/gamma <1C60D8A8C9B7A08609F0BE3386DB25AA3C40F69716938B3CD608B8F4AC3CEB11F3463C0A39522D481E09FA2BAC303604566E11A733A443F6D4DAE2B4D699CE4FC228D342E5BB9DFAF924011D955409F8F13B245291EF956CE998387591B378F72CC874BF1490A1739EFD80F9DEEFD53CE9050D7A6FBF75BC130439CB3672C5F4D4464673665ADEF12BAB675322E2CA31AEF558DBE2ADB50892A3991F71DB17AEF27E29640D3AD6B7A552698841A7258BDE94F0E078A9FB94964BB7> |-/mu <1C60D8A8C9B7CEAE09C95C7D671BDB7A00D6066DD72F05A445B16DFF470D955EBEF4CABBC29886504C0F82C5DD6D2433D7731827CD330A39FDB639CCB875D1F0D6D1E5231C2EFFDA1CE832DDF6019A77D032ECA43A1341120B8377319B72030F1B25943BAE2ED4A2428E73CB6809190CB8B96CB5FA873B75B7B152E54E9782187992A72B1C1A3C693E96AC9701497E728FF7A6FF215D03FDD315F2B520FF04945D480FE1332E5D1CBFA0DE96A6602E88B2525411BF9B82D9413F1A8823AAFD00826974D33F7C53D326554D2206E1844D450C010B2807B003C89981A48335B01E941ECD> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PTEMEF+CMMI12 /XDNQMX+CMMI12 findfont ct_VMDictPut/PTEMEF+CMMI12*1 [13{/.notdef}rp /gamma 8{/.notdef}rp /mu 233{/.notdef}rp]PTEMEF+CMMI12 nfPTEMEF+CMMI12*1 [10.0125 0 0 -10.0125 0 0 ]msf409.779 9.30418 mo(\015)sh458.507 101.991 mo(\026)sh%ADOBeginSubsetFont: CEAAAA+Symbol Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /CEAAAA+Symbol def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 44 /comma putdup 104 /eta putdup 112 /pi putdef/UniqueID 42996 def/FontBBox {-180 -293 1090 1010} defendsystemdict begindup /Private9 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 673 688 487 500] def/StdHW [92] def/StdVW [85] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/space <1C60D8A8C9B8707C25> |-/comma <1C60D8A8C9B8707CE877BD1C53227D26C20F59352F4352F68A654E2AE4BD6351671AF4BDD5A5482EE86F8C770225E9E81C159AE68D0B7053F0605635253CEAE223A411BB425152185D59A2B3753B0B6F10C2B25F677F207E43889CCDC326C00B2F0A> |-/eta <1C60D8A8C9B7C05465AA331C02131F28DA2D7EEA3C908F53294AABD4CD965D134D164EE178F4BB6AB75528F1D7E60B34D046EE6A57925E340E483C527E7341DC4E124CCE90BD6E85937DED09796D572136719159DD20A7AFDB9DAB3EDE9D656A6C97B92FF53A542CE009912FC9D0F1325D6BAEF394E9E979FC7AD5A4D3F1B9272544A59D6E1F88D6649AC12357413672753C6637E10EB2AF4D3B8CC69C4764D2C7B69C25147CA8E032B7863EBC5B4A058F94561B> |-/pi <1C60D8A8C9B79676F4DD18DBFDF17BB128C9FFF22699F24B59533FE5E07ED6CEE94FB8357908C50BCDD6B70F4E7924C2FB68F929BCB277E7BC845662C54500C0C81E0BF52FBCAEF7F7B1F4667738FF84E496C448E4376718B2A904671C2C9B88D66FD1D8BA464B180C1411B54685EE1291C28B068BF72233CCA91BFF414760303897A050C0776AE6D539A2D620A1CFE532EFB6593401DDFC1D151612310049BE378C3A621B747D419B5C> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PTEMEG+Symbol /CEAAAA+Symbol findfont ct_VMDictPut/PTEMEG+Symbol*1 [32{/.notdef}rp /space 11{/.notdef}rp /comma 59{/.notdef}rp /eta 7{/.notdef}rp /pi 143{/.notdef}rp]PTEMEG+Symbol nfPTEMEG+Symbol*1 [10.0125 0 0 -10.0125 0 0 ]msf363.309 42.1438 mo(p, h, )sh363.309 54.1589 mo(h)sh%ADOBeginSubsetFont: CEAAAA+Times-Roman Initial
ct_T42Dict begin
-0.203 -0.426 1.699 1.27
 256 array 0 1 255 {1 index exch /.notdef put} for  /CEAAAA+Times-Roman
Type42DictBegin
[<00010000000b000b000b000b637674209b693f39000000bc0000041e6670
676d9c748d06000004dc00000588676c7966039fcfd3000038600001c7c8
68656164d18cebcb00000a640000003668686561cb0efc1100000a9c0000
0024686d74789130ea1700000ac00000168c6c6f6361a6d38ae30000214c
00000b486d6178700dea07dd00002c94000000206e616d65fee6b28d0000
2cb4000004e870726570eec97ed70000319c000006c36764697200000000
000000000000000005740002054b001d054b0018039700130000ffe30000
ffed0000ffeafe420000054b001dfebdffd6031e000000b4000000b402fe
3f3c0026001c007d00980003007d00de00350017002800e3013e000300b4
00d000df004c005a00c4004a00ab0147008a004e0039006d013d002401d2
00360045009e00be00170079006f00d000460091002100b400baffc20017
003600ab00b800f60009001d003d0058005a008c0099ffc400a000e800f5
ffa1ffea0033008500b800d5ffe2002f0080008c0002001a00250045006a
0070012d0274ff87003e004e009800ba00de0116ff3e00150034003c0044
00670068006d006e0084009800bd00d500d7011c0000002d0030003d0046
0057008b0093009700b000c6011f017b019d0409ff68ff6a0056005a006a
006d009200c400d000e700f1011101bf01c7ff1cffb4ffff000200230038
0042006d0092009c009d00a100a200b400ba00c700c700e400ed01530157
03230334ff0dff32fffbffff000f001c0040004b005c006d006d007c0085
009800c500cb00cb00df011f01280136015501700180018a01c702420313
0407054eff82000000080026003d003d004f006e0073008b00900095009e
00a800ad00ad00c300d300e3010901230241028002f40311034004510576
ff7fffafffbeffcf00030005000e0039004b004b004c0074007800880089
0092009200b600c200d800df00f000fd010701100117011f01b401dd01eb
020002110229028002ca036f038a03af0400049c04dd053e0587fea6fee4
ff67ff95ffcbfff8000200020007002500280037003700380039003f0051
0053005900640068006b007d0098009900af00b100b900d000d500da00dd
00fd00fe011e013601370142015a017a01a301c401cc01f702020210021f
022902290287029f029f02c002cc02d5031a031d03280331035e0396039f
03a8049305640571059405b106eb0788fe63fe64fe76fe7cfebcff4bff97
ffacffc0000700210028002d003000480049004c0051005400560066007a
007c0085008a008c009900af00b300b500b500b600b900bb00bc00cc00d0
00e100f400f600fc00fd0109011001170118011f01300139013c013e0142
014301440149014b014f01540155015701580161016a017d017e0184019c
019c019d01a101a301b401b401b901bb01cb01d001d701d701e401ec01ec
01f7020502070218022302260240024b024b025702570261026302680269
026d028d028d02a602af02b402b80300033e03460361036103b003c003d5
03d703df03f9041a0474047b04c104cc04da04e404f204f6051005300555
055606180639067606a406b3076b07ad07da00b200d500ae00bb00000000
000000000000000000630079029602fa007e0247009100c8000002ca0248
00da007d01b301a4002d00a5009c0034003400dc00dc0040004000310031
000a000a00820030002a002a00004027262524232221201f1e1d1c1b1a19
1817161514131211100f0e0d0c0b0a090807060504030201002c45234660
20b02660b004262348482d2c452346236120b02661b004262348482d2c45
234660b0206120b04660b004262348482d2c4523462361b0206020b02661
b02061b004262348482d2c45234660b0406120b06660b004262348482d2c
4523462361b0406020b02661b04061b004262348482d2c0110203c003c2d
2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320b0
4d44235920b09051582320b00d44235921212d2c20204518684420b00160
2045b04676688a4560442d2c01b9400000000a2d2c00b9000040000b2d2c
2045b00043617d6818b0004360442d2c45b01a234445b01923442d2c2045
b00325456164b050515845441b2121592d2cb00143632362b0002342b00f
2b2d2c2045b0004360442d2c20b0032552582359212d2c69b04061b0008b
0c6423648bb8400062600c642364615c58b0036159b002602d2c45b0112b
b0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb017458cb0
172344b0177ae5182d2cb002254661658a46b040608b482d2cb002254660
8a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545
b019234445b01a23444565234520b00325606a20b009234223688a6a6061
20b0005258b21a401a4523614459b0005058b219401945236144592d2cb9
187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b2d
2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d2c0120
b003252349b04060b0206320b000525823b002253823b002256538008a63
381b212121212159012d2c4569b00943608a103a2d2c01b005251023208a
f500b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b0
062510f500edec2d2c20b001600110203c003c2d2c20b001610110203c00
3c2db800272c4bb800095058b101018e59b801ff85b800441db900090003
5f5e2db800282c2020456944b001602db800292cb800282a212db8002a2c
2046b003254652582359208a208a49648a204620686164b0042546206861
64525823658a592f20b00053586920b000545821b040591b6920b0005458
21b0406559593a2db8002b2c2046b00425465258238a592046206a6164b0
042546206a61645258238a592ffd2db8002c2c4b20b0032650585158b080
441bb04044591b21212045b0c05058b0c0441b2159592db8002d2c202045
6944b001602020457d691844b001602db8002e2cb8002d2a2db8002f2c4b
20b003265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a2359
20b0032653582321b801008a8a1b8a235920b0032653582321b801408a8a
1b8a235920b80003265358b0032545b8018050582321b8018023211bb003
254523212321591b2159442db800302c4b535845441b2121592db800312c
4bb800095058b101018e59b801ff85b800441db9000900035f5e2db80032
2c2020456944b001602db800332cb800322a212db800342c2046b0032546
52582359208a208a49648a204620686164b004254620686164525823658a
592f20b00053586920b000545821b040591b6920b000545821b040655959
3a2db800352c2046b00425465258238a592046206a6164b0042546206a61
645258238a592ffd2db800362c4b20b0032650585158b080441bb0404459
1b21212045b0c05058b0c0441b2159592db800372c2020456944b0016020
20457d691844b001602db800382cb800372a2db800392c4b20b003265358
b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b003265358
2321b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b8
0003265358b0032545b8018050582321b8018023211bb003254523212321
591b2159442db8003a2c4b535845441b2121592d0001000000000000be66
5ae95f0f3cf50111080000000000a33d5b0000000000d03cceacfe60fc93
0d9a0a2c000000090001000000000000000100000600fe0000000dc5fe60
fe600d9a0001000000000000000000000000000005a305c7002100000000
020000000200000002aa0109034400bc040000000400005a06aa007d0639
00520171006702aa005e02aa0036040000870483003d020000d702aa0050
020000dc0239000404000012040000e30400003d04000059040000170400
004104000046040000280400006d0400003d023900a5023900aa0483003d
0483003d04830012038d0087075e00b805c7001e055600230556003305c7
002104e300170473001705c7003105c7002102aa0021031d001505c70025
04e30017071d001705c7001705c7003d0473002105c7003d055600170473
005504e3001c05c7001c05c70021078d000905c7001505c7002d04e3000e
02aa00b40239ffc002aa004403c100420400000002aaffec038d004b0400
0007038d002f04000031038d002802aa0028040000360400001202390028
0239ff8a0400000402390025063900210400002104000034040000090400
003102aa0009031d006802390019040000120400002505c7002a04000023
0400001c038d003403d7007f019a008703d7007f0454001c05c7001e05c7
001e0556003304e3001705c7001705c7003d05c7001c038d004b038d004b
038d004b038d004b038d004b038d004b038d002f038d0028038d0028038d
0028038d0028023900280239fff40239ffde0239ffed0400002104000034
040000340400003404000034040000340400001204000012040000120400
00120400006d033300570400006d040000160400009202cd003d03a0ffd5
04000017061400420614004207d7003f02aa008402aaffed0464002d071d
000905c7003d05b400650464002f0464002f0464002a0400000e049cff63
03f4006305b40017069600570464004a0231001e02350017027b00210625
00ad0556004d04000034038d002b02aa00bb0483003d0464ffea0400000b
0464002804e500aa040000570400005a080000e30200000005c7001e05c7
001e05c7003d071d003805c700370400fffb080000f1038d0037038d0047
02aa00ba02aa00bf0464002f03f400710400001c05c7002d0156feaa05f4
001a02aa007f02aa00550473003f047300420400006d0200006a02aa00bf
038d00470800000e05c7001e04e3001705c7001e04e3001704e3001702aa
002102aa001002aa001f02aa002105c7003d05c7003d0652006905c7003d
05c7001c05c7001c05c7001c0239002802aaffde02aaffcb02aaffde02aa
fffd02aa00b802aa008402aa003402aaffe502aa01d702aaffde04e30004
0239001e04730055031d004f04e3000e038d0034019a008705c700210400
003605c7002d0400001c047300210400000e0483003d0483005502660087
02660007026600160600006d0600006d060000350400000005c700310400
003602aa002104730055031d006805560033038d002f05560033038d002f
0400003105c7001e038d004b05c7001e038d004b05c7001e038d004b0556
0033038d002f05560033038d002f05c7002104d7003104e30017038d0028
04e30017038d002804e30017038d002804e30017038d002804e30017038d
002805c700310400003605c700310400003605c700310400003604000036
05c700210400001205c700210400ffd502aa00020239ffd002aa000f0239
ffde02aa00210239002805c7002104720028031d00150239ff8a05c70025
0400000404e300170239002504e300170239002504e300170333002504e3
001702d7002505c700170400002105c700170400002105c7001704000021
0400002105c7003d0400003405c7003d0400003405c7003d040000340556
001702aa00090556001702aa00090556001702aa000904730055031d0068
04730055031d005804e3001c0239001904e3001c0385001904e3001c0239
ffde05c7001c0400001205c7001c0400001205c7001c0400001205c7001c
0400001205c7001c0400001205c7001c04000012078d000905c7002a05c7
002d0400001c04e3000e038d003404e3000e038d003404730055031d0068
04e3001c023900190400004202aaffec02aa008402aaffde02aaffcb02aa
ffde02aafffd02aa00b802aaffed02aa008402aaffe502aaffde020000bf
02aa003402aa01d7020000040200000005c7002105c700310400003604e3
00170239002505c700250400000405c700170556001702aa000904000021
06ac002705c7002d04e3002d05c7003905c7002d05c7003f06aa002d06aa
006a031d00440639003b06390019078d002f0639001d0556007306aa006a
06aa003d04e3002d04e3001d0556001f0639001d06ac007506390019071f
002d0625008704e300580473007d040000290473005e038d005804000058
047300290473006a0239007d04730046040000370473008d040000210400
00350473004e04730058038d006004730058038d0012047300270556005c
0400002905c7003905c7005802000087023900aa038d002f0239ff8a0222
009e022200680194002e05c7001e02aa002402aa00bf02aa00bf02aaffec
02aa008402aa00b802aaffed02aa008402aaffde02aaffde02aafffd02aa
ffcb02aaffde02aaffec02aa008402aaffcb02aa00bf02aaffed01940059
0239ff8a078f001b05c7001f0556003305560029047300190571002904e3
001907b2000804ec003f05ee002905ee002905c700290564001b071d0027
05c7002905c7004405c70029047300170556004404e3002505fc001905fc
003b05c7001905d700290585001d075800290766002905ee001907620029
04e300290556003d077d0029057500190473001902aa00250639001f0400
000a04730019033300140239002d03330014031d00140556004403a40033
02aa00250239fff60764001b05b200140758002905b200140239ff910473
005606aa001f0400000a05f0002d04000014031d006805fc00190400001f
05c7002904000014055c001f038d002d03b00008038d004c0400004803a4
001403330014038d000a038d002d05ee000203330023041d0014041d0014
040000140400001404db0014040000140400003d0400001404000004038d
003303ae001b0400001f05d1003d04000023040000140400001406080014
060800140473000a056d001403ae0023038d004205ee00140464002e0464
002d03f4005d03f4006305b4012205b400170231fe600231001e0464ff35
0464ffea0464002904640028019a00870334008700000000000000000000
0000000000000889005707a6005705c7002502aa00210554002107fe0021
0871002105c70021087100210b1b00210dc500210871002105c700150871
00150b1b001504e300170556003305c70021071d00170239002804720028
06ab0028063900280400002506390025087200250aab0025063900280400
0023063900230872002302390025038d002f040000310639002102aa000b
0239fffd02aa01090a35002109540021078d003108000017071c00170472
002508e40017080000170639002105c7001e038d004b02aa00100239ffda
05c7003d0400003405c7001c0400001205c7001c0400001205c7001c0400
001205c7001c0400001205c7001c0400001205c7001e038d004b05c7001e
038d004b071d00090556004d05c700310400003605c700250400000405c7
003d0400003405c7003d040000340a35002108da0021076a003105c70031
05c700170400002105c7001e038d004b071d00090556004d05c7003d0400
003405c700210400001205c7001e038d004b04e30017038d002805c7003d
0400003405c7003d0400003405c7003d0400003405c7003d0400003405c7
002d0400001c038d004702aa002105c7001e038d004b0556002304000007
0556002304000007055600230400000705560033038d002f05c700210400
003105c700210400003105c700210400003105c700210400003105c70021
0400003104e30017038d002804e30017038d002804e30017038d002804e3
0017038d002804e30017038d00280473001702aa002805c7003104000036
05c700210400001205c700210400001205c700210400001205c700210400
001205c700210400001202aafffd0239ffcb02aa001f0239fffa05c70025
0400000405c700250400000405c700250400000404e300170239002504e3
00170239ffdd04e300170239ffdd04e300170239ffdd071d001706390021
071d001706390021071d00170639002105c700170400002105c700170400
002105c700170400002105c700170400002105c7003d0400003405c7003d
0400003405c7003d0400003405c7003d0400003404730021040000090473
0021040000090556001702aa00090556001702aa00090556001702aaffde
0556001702aaffd304730055031d006804730055031d006804730055031d
006804730055031d005804730055031d006804e3001c0239001904e3001c
0239001904e3001c0239ffea04e3001c0239ffea05c7001c0400001205c7
001c0400001205c7001c0400001205c7001c0400001205c7001c04000012
05c700210400002505c7002104000025078d000905c7002a078d000905c7
002a078d000905c7002a078d000905c7002a078d000905c7002a05c70015
0400002305c700150400002305c7002d0400001c04e3000e038d003404e3
000e038d003404e3000e038d0034040000120239ff9705c7002a0400001c
05c7001e038d004b05d5001e0484004b05dc0033040400c205c7001e038d
004405c7001e038d004b05c7001e038d004b05c7001e038d004b05c7001e
038d004b05c7001e038d004b04e30017038d002804e30017038d0028052f
00170422002805550089042300be04e30017038d002804e30017038d0028
02aa00210239002805c7003d0400003405c7003d04a3003405c7003d0503
013705c7003d0400003405c7003d0400003405c7001c0400001205c7002d
0400001c05c7002d0400001c05c7002d0400001c04e30017038d001504e3
0017038d002804e30019038d002d041d001407b2000805ee000205c7001f
038d004c05c7001f038d004c071d00090556004d04e30019038d002d07b2
000805ee000204ec003f0333002305ee0029041d001405ee0029041d0014
05c700440400003d0556003d038d004005fc00190400001f05fc00190400
001f05fc00190400001f0585001d0400001407620013056d0014071d0017
063900210556001702aa000902aa001d0194002e02aa001d02bb002702aa
00ba02aa00bf02aa00500400000402aa00280400002105c7001704e30017
02aa00a702aaffde02aaffde02aa00b805c7003d04db0034047e0012038d
0028038d0028047300190333001407b2000805ee000205c7002904000014
04ec003f0333002305c600290400001405c7002d05c7002d05c700190400
00230585001d0400001405c700440400003d0585001d04000014060f001c
038d00280356ffec02aafffd0541003b0541003b038d00280400000e0400
000e05c70029047400140585001d040000140222009e0222009e0222002a
01b5ffe601b5ffb4022200680222ffac0222ffde0222002a0222ffac0222
ffde0222002a01b5ffb40239ff8a05c7001e038d003c05c7001e038d004b
04e30017038d001504e30017038d002802aaffa40239ff6f02aa00210239
fffc05c7003d0400003405c7003d040000340556001702aaffb105560017
02aa000905c7001c0400001205c7001c0400001202aa002805c7001e038d
004b05c7001e038dffe505c7001e038d004a04e30017038d002804e30017
038d002802aa00210239002805c7003d0400003405c7003d0400003405c7
003d04db003405c7003d04db003405c7003d04db003405c7003d04db0034
05c7003d04db003405c7001c04000012060f001c047e0012060f001c047e
0012060f001c047e0012060f001c047e0012060f001c047e001205c7002d
0400001c038d0028038d002805ee00290541003b038d002805c700440400
003d06ac002705c7002d06aa002d031d004406aa006a0639001d06aa0087
0239ffef031d002a0639001d04e30058038d0058047300290239007d0473
00270239ff87047300270473004e0473002705c7005804e3005804e30058
04e3005804e3005804e3005804e3005804e3005804e30058066efff3066e
fff30725003c0732ffac0659ffde066affde0661fff3065dfff3038d0058
038d0058038d0058038d0058038d0058038d005807e9009e07e9009e07e9
ffac07e9ffac07e9ffde07e9ffde04730029047300290473002904730029
0473002904730029047300290473002908cc009e08cc009e08ccffac08cc
ffac08ccffde08ccffde08cc002a08cc002a023900660239007d0239fff4
0239fff40239002602390026023900100239001004b8009e04b8009e053f
ffac053fffac053fffde053fffde053f002a053f002a0473004e0473004e
0473004e0473004e0473004e0473004e079e009e0777009e08ccffac08cc
ffac07caffde07edffde0473002704730027047300270473002704730027
047300270473002704730027085b009e085bffac085bffde085b002a05c7
005805c7005805c7005805c7005805c7005805c7005805c7005805c70058
06ca009e0706009e0847ffac0847ffac0720ffde0718ffde0725002a070b
002a04e3005804e30058038d0058038d005804730029047300290239ffea
0239007d0473004e0473004e047300270473002705c7005805c7005804e3
005804e3005804e3005804e3005804e3005804e3005804e3005804e30058
08b9fff308b9fff3097cffac0985ffac08dcffde0851ffde08b4fff308b9
fff304730029047300290473002904730029047300290473002904730029
047300290b05009e0b05009e0b05ffac0b05ffac0b05ffde0b05ffde0b05
002a0b05002a05c7005805c7005805c7005805c7005805c7005805c70058
05c7005805c700580914009e0955009e0a80ffac0a80ffac0a80ffde0a80
ffde0a80002a0a80002a04e3005804e3005804e3005804e3005804e30058
04e3005804e3005806ac002706ac002706ce0055065dfff308e500270473
00290473002904730029047300290473002907e9006807e9006808cc0068
08cc006808e3002d0239ffd60239ffb70239ffcf0235ffcf023900100239
0001031d0044031d0044053f0068053f0068047300270473002704730027
04730027047300580473005804730027047300270639001d0639001d085b
0068085b00680705009e05c7005805c7005805c7005805c7005805c70058
08cc0068075500680755006806ab0068085e00ad05c7001e038d004b038d
004b02aa00100239ffdd0239002805c7001c0400001204000023060f001c
047e001204e3005804e3005804e3005804e3005804e3005804e3005804e3
005804e3005804e3005804e3005804e3005804e3005804e3005804e30058
04e3005804e300580239ffb70239ffb70239ffb70239ffb70239ff920239
ffb70239ffb70239ff920239ffb70239ffd60239ffd60239ffcf0239ffd6
0239ff920239ffc40239ffd60239ff920239ffc404730027047300270473
002704730027047300270473002704730027047300270473002704730027
047300270473002704730027047300270473002704730027047300270473
002706ac002706ac002706ac002706ac002706ac002706ac002706ac0027
06ac002706ac002706ac002706ac002706ac002706ac002706ac002706ac
002706ac0027031d0044031d0044031d0044031d0021031d002a031d0044
031d0044031d002a031d0044031d0044031d0044031d0044031d0044031d
002a031d0044031d0044031d002a031d00440639001d0639001d0639001d
0639001d0639001d0639001d0639001d0639001d0639001d0639001d0639
001d0639001d0639001d0639001d0639001d0639001d0639001d0639001d
06ce002a06ce002a053f002a053f002a085b002a085b002a04e3005804e3
005804e300580239ffb70239ffb70239ffb7047300270473002704730027
0400003100000036003600360036008a00f001880240030203d2040c0454
04a20542057605bc05da0604063206b0070e079c082e088e093c09c40a1a
0afe0ba20be40c420c880cb40cfc0d8c0e5e0f3a0ff01084110e11b61244
12f2138013d2143a151215781616169c172817ca188219401a2c1a9e1b24
1bda1d161dfe1e9a1f0c1f4a1f7a1fb62004201e2050213821ba2248230e
23ae2422250625aa2614269c275a27a62892293c29b42a642b182b9a2c66
2cc82d622df22ed62fba305a30d43140316431d232163222322e331a3326
3332333e334a33563362336e337a33863392346834743480348c349834a4
34b034bc34c834d434e034ec34f835043510351c35283534354035d43634
36d637b838a838ca39503a0e3b543c4c3cee3d223d663dc63eb83f7c402a
407440b040ea41a8425042ee436243da447244ea457045a8463e47684822
48a649004926496c4a504ab84af04b704be24c384c384c444c504c5c4d26
4dfa4e164e344e9c4f084f464f844fd250165022502e504e50c251065142
520c52d4539c53c65402546e55545560556c557855845590559c55a855b4
55c055cc55d85650565c56685674568056d8570e578057a257fe58305888
5904594c59a059d65a645ae05aec5af85b045b105b305c025cd85ce45cf0
5dca5e6a5e845ee65f225f7e5fe4608c611461c662a462b062bc62c863ba
64cc64d864e464f064fc65ca65d665e265ee65fa66066612661e662a6636
6642664e665a66666672667e668a669666a266ae66ba66c666d266de66ea
66f66702670e671a67266732673e6790679c67a867b467c067cc67d867e4
67f067fc680868146820682c683868446850685c686868746880688c6898
68a468b068bc68c868d468e068ec68f869046910691c692869346940694c
695869646970697c6988699469a069ac69b869c469d069dc69e869f46a00
6a0c6a186a246a306a3c6a486a546a606a6c6a786a846a906a9c6aa86ab4
6ac06acc6ad86ae46af06afc6b086bc66bce6bd66bde6be66bee6bf66bfe
6c066c0e6c166c1e6c486c506c586c866c866c8e6c9a6ca86cb46cc06ccc
6cd86ce46cf06cfc6d086d6e6e546e986eb86f2a6f686ffe70c871087194
71f07292730a738c742e74aa754a758e75e07658773877de78b8798a7a1a
7aee7b927c887d2c7dec7e767f5e7f94808080da819881e682e2838c846a
854e8624869e876e8800887289488a688a8c8af68b608be88c0c8c248c46
8c528c728c9c8cc68cd08cda8ce48cee8cf88d028d0c8d168d208d2a8d32
8d3a8d428d6c8d788da48dda8eda8f148f568f9a8fc4901a905a90cc911c
915291b291fa9246927c92b492ec931a9352938c93bc9404945a94b294ec
9520956e95c89604964e968296c2970c975e978697a497fe984e988698c6
98fc992c995e999e99e09a1e9a649ac29b229b709bd49c0c9c5e9cac9cfa
9d5c9dc89e129e829eec9f209f649fd4a028a068a0bca106a14aa17aa1c8
a1faa26ca2aca2fca372a3cea41ca464a4b0a4e4a522a56ea5a6a5d2a618
a680a6cea718a762a7c2a828a86aa8c8a906a942a998a9a4a9aca9b8a9c0
a9cca9d4a9e0a9e8a9f4a9fcaa08aa10aa18aa24aa24aa24aa24aa24aa30
aa3caa44aa4caa58aa68aa74aa7caa88aa98aaacaab8aac0aaccaadcaae4
aaecaaf4aafcab04ab10ab20ab2cab34ab40ab50ab64ab70ab78ab84ab94
ab9caba4abacabb4abc0abccabd4abe4abf4ac04ac10ac1cac28ac34ac40
ac4cac58ac64ac70ac7cac88ac94aca0acacacbcacccacdcacecacfcad0c
ad1cad2cad3cad4cad5cad6cad78ad84ad90ad9cada8adb4adc0adccaddc
adecadf8ae04ae10ae1cae28ae34ae44ae54ae60ae6cae78ae84ae90ae9c
aea8aeb4aec0aeccaedcaeecaefcaf0caf18af24af34af44af50af5caf64
af6caf78af84af90af9cafa8afb4afc0afccafd8afe4aff0affcb008b014
b020b02cb038b044b050b05cb06cb07cb08cb09cb0a8b0b4b0c0b0ccb0dc
b0ecb0f8b104b110b11cb128b134b140b14cb158b164b170b17cb188b194
b1a0b1acb1bcb1ccb1d8b1e4b1f0b1fcb208b214b220b22cb23cb24cb258
b264b270b27cb288b294b2a0b2acb2b8b2c4b2d0b2dcb2e8b2f4b300b30c
b318b324b334b344b354b364b374b384b394b3a4b3b0b3bcb3c8b3d4b3e0
b3ecb3f8b404b414b424b430b43cb448b454b460b46cb47cb48cb49cb4ac
b4bcb4ccb4d8b4e4b4f0b4fcb508b514b520b52cb538b544b550b55cb568
b574b584b594b5a4b5b4b5c0b5ccb5d8b5e4b5f0b5fcb608b614b620b62c
b638b644b650b65cb668b674b680b68cb698b6a4b6b0b6bcb6c8b6d4b6e0
b6ecb6f8b704b710b71cb728b734b744b754b764b774b784b794b7a4b7b4
b7c4b7d4b7e4b7f4b804b814b824b834b840b84cb858b864b874b884b894
b8a6b8b6b8c6b8d6b8e6b8f2b8feb90ab916b926b936b946b956b966b976
b986b996b9a2b9aeb9bab9c6b9d2b9deb9eab9f6ba06ba16ba26ba36ba42
ba4eba5aba66ba72ba7eba8aba96baa2baaabab2babebacabad6bae2baee
bafabb06bb12bb1ebb2abb36bb42bb4ebb5abb66bb72bb7ebb8abb96bba2
bbaebbbabbc6bbd2bbdebbeabbf6bc02bc1abc22bc3abc74bc98bcbabcc8
bd1ebd50bdaabdfabe38be66be74be82bea6befcbf4abfacbfdec010c042
c07ac0f6c176c1c6c22cc298c2f6c33ac396c3dac41ec480c4dac51ec580
c5bec5f8c62cc676c6d0c702c72cc74cc784c7bcc7eec842c896c8e6c94a
c98ac9deca00ca22ca42ca82cabacad2cb04cb36cb70cba2cbd6cc12cc48
cc54cc60cc6ccc78cc84cc90cc9ccca8ccb4ccc0ccccccd8cce4ccf0ccfc
cd08cd14cd20cd2ccd38cd44cd50cd5ccd68cd74cd80cd8ccd98cda8cdb8
cdc8cdd8cde4cdf0ce00ce10ce1cce28ce34ce40ce50ce60ce6cce78ce84
ce90ce9ccea8ceb4cec0ceccced8cee4cef0cefccf08cf14cf20cf2ccf38
cf44cf50cf5ccf68cf74cf80cf90cfa0cfaccfb8cfc4cfd0cfdccfe8cff4
d000d00cd018d024d030d03cd048d054d060d06cd078d084d090d09cd0a8
d0b4d0c0d0ccd0d8d0e4d0f0d0fcd108d114d120d12cd138d144d150d15c
d168d174d180d18cd198d1a4d1b0d1bcd1c8d1d4d1e0d1ecd1f8d204d210
d21cd228d234d240d24cd258d264d270d27cd288d294d2a0d2acd2b8d2c4
d2d0d2dcd2e8d2f4d300d30cd318d324d330d33cd348d354d360d36cd378
d384d390d39cd3a8d3b4d3c0d3ccd3d8d3e4d3f0d3fcd408d414d420d42c
d438d444d450d45cd468d474d480d48cd498d4a4d4b0d4bcd4c8d4d4d4e0
d4ecd4f8d504d510d51cd528d534d540d54cd558d564d570d57cd588d594
d5a0d5acd5b8d5c4d5d0d5dcd5e8d5f4d600d60cd618d624d634d644d654
d664d674d684d694d6a4d6b4d6c4d6d4d6e4d6f4d704d714d724d734d744
d754d764d774d784d794d7a4d7b4d7c4d7d4d7e4d7f4d804d814d824d834
d844d854d864d874d884d894d8a4d8b4d8c4d8d4d8e4d8f4d904d914d924
d930d93cd94cd958d968d974d984d990d99cd9a8d9b4d9c0d9d0d9dcd9ec
d9f8da08da14da20da2cda38da44da50da5cda68da74da80da8cda98daa4
dab0dabcdac8dad4dae0daecdaf8db04db10db1cdb28db34db40db4cdb58
db68db74db84db90dba0dbacdbb8dbc4dbd0dbdcdbecdbfcdc0cdc1cdc2c
dc38dc48dc58dc64dc70dc7cdc8cdc9cdcacdcbcdcccdcdcdcecdcfcdd0c
dd1cdd2cdd3cdd4cdd5cdd6cdd7cdd8add9adda8ddb6ddc4ddd2dde0ddee
ddfcde0cde1cde2cde3cde4cde5cde6cde7cde8cde9cdeacdebcdeccdedc
deecdefcdf0cdf1cdf2cdf3cdf4cdf5cdf6cdf7cdf8cdf9cdfacdfbcdfcc
dfdcdfecdffce00ce01ce02ce03ce04ce05ce06ce07ce08ce09ce0ace0bc
e0cce0dce0ece0fce10ce11ce12ce13ce14ce15ce16ce17ce18ce19ce1ac
e1bce1cce1dce1ece1fce20ce21ce22ce23ce24ce25ce26ce27ce28ce29c
e2ace2bce2cce2dce2ece2fce30ce31ce32ce33ce34ce35ce36ce37ce38a
e398e3a6e3b6e3c6e3d6e3e40001000005a3007100060096000900020010
0010003b000007e806c3000400010000002301aa0001000000000000006e
000000010000000000010005006e00010000000000020007007300010000
000000030021007a0001000000000004000b009b00010000000000050008
00a60001000000000006000b00ae0001000000000007002e00b900010000
00000100001800e70001000000000101000c00ff00010000000001020009
010b0001000000000103001001140001000000010007002b012400010000
000200070038014f0001000000030007002c018700010000000400070036
01b30001000000050007003201e90001000000060007002c021b00010000
000700070038024700030001040400020006027f0003000104060002000e
02850003000104070002000c02930003000104090002000e029f00030001
040b0002001002ad00030001040c0002000c02bd00030001041000020010
02c90003000104110002000a02d90003000104120002000602e300030001
04130002001002e90003000104140002000c02f90003000104160002000c
03050003000104190002000e031100030001041d0002000c031f00030001
080400020006032b000300010c0a0002000c0331a920313939302d393920
4170706c6520436f6d707574657220496e632e20a92031393831204c696e
6f747970652041472020a920313939302d3931205479706520536f6c7574
696f6e7320496e632e20a920313939302d39312054686520466f6e742042
757265617520496e632e54696d6573526567756c617254696d657320526f
6d616e3b2031302e30643165333b20323031342d30392d313554696d6573
20526f6d616e31302e306431653354696d65732d526f6d616e54696d6573
206973206120726567697374657265642074726164656d61726b206f6620
4c696e6f74797065204147416c6c205479706f6772617068696320466561
7475726573416c6c2046656174757265734c6967617475726573436f6d6d
6f6e204c696761747572657354696d65732065737420756e65206d617271
756520648e706f738e65206465204c696e6f7479706520414754696d6573
206973742065696e2065696e676574726167656e657320576172656e7a65
696368656e20646572204c696e6f7479706520414754696d6573208f2075
6e206d61726368696f207265676973747261746f206469204c696e6f7479
706520414754696d65732069732065656e20676572656769737472656572
642068616e64656c736d65726b2076616e204c696e6f7479706520414754
696d6573208a722065747420726567697374726572617420766172756d8a
726b6520669a72204c696e6f7479706520414754696d657320657320756e
61206d617263612072656769737472616461206465204c696e6f74797065
20414754696d657320657220657420726567697374726572657420766172
656dbe726b652074696c68bf72656e6465204c696e6f747970652041476a
196e969ad4004f007200640069006e00e60072004e006f0072006d006100
6c0052006500670075006c00610072004e006f0072006d00610061006c00
69004e006f0072006d0061006c005200650067006f006c00610072006530
ec30ae30e530e930fcc77cbc18ccb40052006500670075006c0069006500
72004e006f0072006d0061006c004e006f0072006d0061006c041e043104
4b0447043d044b0439004e006f0072006d0061006c5e3889c44f53004e00
6f0072006d0061006c00b800312bb800272b400f09cf54010f54013fd029
019f540140410d01fb0001003001fb0001002001fb0001001001fb000100
0001fb400b01002001900701900601f0414f0204000100ef0203000100c0
0201000100b001ff00b0020100bf0208000300af020100af02080002009f
0202009f02080002007f0200007f0202007f0208008f0200008f02020080
0205008f02080007006f0200006f0202006f0205006f02080004005f0202
00500203005f02080003004f0202004f0204004f0208000300300202003f
0204003002080003002f0201002f0204002f02080003001f0208b2010840
ba01e5014d0152b50f1fc2710e1fbc014b014d0062001f0131b2864f1fbe
01a60020000d018f0020000d0182400e200dde200dda200d8f200d7f200d
be018b0050000d016c0050000d0101400e500dd8500d43500d3f500d3a50
0dbb013b0028000d01034014280dbd280db8280da7280d7c280d76280d2d
280dbe01b1004a000d01a7004a000d019440204a0df74a0dc84a0d984a0d
854a0d7a4a0d664a0d214a0d621c0d241c0d1b1c0db8017eb60f920f900f
0009b8017eb4900d92900db801f5b3312f1f41b801f3b5331f2b2c361fb8
0189b2542c1fb80183b254ab1f4115018100290401001f01800029020100
1f017c00440201001f017901300201001f017801300401001f0177b22f29
1fb80173b23e9e1fb80171b23ee41fbc016b002e0401001f016ab233e41f
b80138b2545e1f4109013300290401001f013200440801001f012db23e93
1fb8012ab22ccd1f41110127002e0125001f012400330801001f01230033
0401001f012200330401001f0106b254261fb80105b4542c1fff29b80101
b21ffe88b80201b61ffb2f521ff62eb80401b21ff52eb80801b21fe129b8
02abb21fdd2fb802ab40171fdb2f5e1fd93e4a1fc454261fc354e41fbf2f
6c1fba2cb80401b21fa944bc0401001f00a80130019a400b1fa52f931fa4
2f891fa23eb80401b21fa033b80801b21f9654b80801b21f9529b80401b6
1f8954261f732eb80156b21f7233b802ab400b1f6b2f6c1f6a2c4b1f632e
b8019a400f1f2e2c371f532fbb1f512f721f4f2cb80401b21f4944b80401
b21f482fba0401001f01f3400d411d1f412f1d1f3d3ecd1f3b44b80201b2
1f392eb8019ab21f343eb80401b21f322eb80201b61f313e4c1f2b2eb804
04b61f2a54311f2233b80201402d1f5567075f0755073707350730072607
25071e071d071408120810080e080c080a080808060804080208000814b8
ffe0402b0000010014061000000100060400000100041000000100100200
0001000200000001000002010802004a00b801ff85b0018d16763f183f12
3e113946443e113946443e113946443e113946443e11394660443e113946
60442b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b1db0964b5358b0
aa1d59b0324b5358b0ff1d594bb03553205c58b901e701e54544b901e601
e545445958b9012101e7455258b901e70121445959184bb04c5058b801e6
4569b801e7456961b0405258b901e601e645b040614459594bb05653205c
58b9002901e64544b9005401e645445958b902360029455258b900290236
4459594bb08953205c58b9002f01e74544b9004401e745445958b902e400
2f455258b9002f02e44459594bb0cd53205c58b188294544b12929454459
58b9052e0088455258b90088052e4459594bb8020153205c58b90130002f
4544b12f2f45445958b90ab00130455258b901300ab04459594bb01d5320
5c58b133334544b13e3345445958b13233455258b133324459594bb02f53
205c58b133334544b12c3345445958b15233455258b133524459594bb05b
53205c58b133334544b12e3345445958b1a033455258b133a04459592b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb35b9b819c4565234560
23456560234560b08b766818b080622020b1819b4565234520b003266062
636820b003266165b09b236544b081234420b15b9c4565234520b0032660
62636820b003266165b09c236544b05b2344b1009c455458b19c406544b2
5b405b4523614459b3868d7145456523456023456560234560b089766818
b080622020b1718d4565234520b003266062636820b003266165b08d2365
44b071234420b186454565234520b003266062636820b003266165b04523
6544b0862344b10045455458b145406544b286408645236144592b2b2b2b
4569534273737373737373737373737373737373737373737475755e7373
5e0000>
[16237 16269 16205 16041 16185 16337 16361 3053 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd

1 0 3 <> CEAAAA+Times-Roman AddT42Char 
1 1956 10 <00010067031a00fd0568000e003a401c07cc0e1017024006700770210e0e
020b051f0248081f0b190f9168182b4e10f44de4f4e41112393d2f1aecec
181a10e64d007d2f18ed31301216151406070323032e0135343633e01d01
0431243403051b2f0568332c070e22fe4801971930191f360000>CEAAAA+Times-Roman AddT42Char 
1 2996 17 <000100dcffe801bf00cb000b00264013052a0b0b0d17171a082a02190c0d
c321788e182b2b4ef44dfd4e456544e6003f4ded31300426353436333216
15140623011e42432f2f42413018432f2f42422f2f430000>CEAAAA+Times-Roman AddT42Char 
1 0 0 <0002002100000597054b000300070043b40201490506b80156401c000407
4903000a0504490303021a090607490100190809eb214652182b2b4ef43c
4dfd3c4e10f63c4d10fd3c003f3cfd3c10f43cfd3c313033112111271121
11210576b8fbfa054bfab5b803dbfc250000>CEAAAA+Times-Roman AddT42Char 
CEAAAA+Times-Roman /CharStrings get begin
/space 3 def
/quotesingle 10 def
/period 17 def
end
CEAAAA+Times-Roman /Encoding get
dup 32 /space put
dup 39 /quotesingle put
dup 46 /period put
pop
end
%ADOEndSubsetFont
/PTEMEH+Times-Roman /CEAAAA+Times-Roman findfont ct_VMDictPut/PTEMEH+Times-Roman*1 [32{/.notdef}rp /space 6{/.notdef}rp /quotesingle 6{/.notdef}rp /period 209{/.notdef}rp]PTEMEH+Times-Roman nfPTEMEH+Times-Roman*1 [10.0125 0 0 -10.0125 0 0 ]msf369.346 54.1589 mo(' ...)[1.80219 2.50311 2.50311 2.50311 0 ]xshgrestore
%ADOBeginSubsetFont: SJERMX+CMR12 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginPTEMDZ+CMR12 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/colon <1C60D8A8C9B85D12B760F97E35CE56A4095E9F7AA1A00656E95C0DD52F4E15A0283B28A01742D3598E509B6264639DC3B168E3F06534E138A11F64F52DCAA93297CC1E84D3> |-/F <1C60D8A8C9B672D450D6DAA518819E227C353EA137D1B3E0FADF23EFEEBA912CEE2D2ECB468D04F2FDFFABE14B32446731B810B773BCF7B2671BF3E130945DC57674292BE961FE5669AD0098B97F02363FDCB6541824BD6C856BA7928C1A3CB8ECCBADD83C2D41263258AC3CED3F6F639528E79972376E491309F4F09D95FCD70D55BB7A7452C313E6B7B87F22FE09B9180501A4F1C63DF08E> |-systemdict /gcheck known {setglobal} if end {end} ifendPTEMDZ+CMR12 /Encoding getdup 58 /colon putdup 70 /F putpop%ADOEndSubsetFont
/PTEMDZ+CMR12*1 [12{/.notdef}rp /fi 27{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period 2{/.notdef}rp /one /two /.notdef /four 5{/.notdef}rp /colon /semicolon 5{/.notdef}rp /A 2{/.notdef}rp /D /.notdef /F /.notdef /H 3{/.notdef}rp /L /M /.notdef /O /P 2{/.notdef}rp /S /T /.notdef /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y 134{/.notdef}rp]PTEMDZ+CMR12 nfPTEMDZ+CMR12*1 [11.955 0 0 -11.955 0 0 ]msf10.8741 128.744 mo(Figure)[7.63934 3.2518 5.85309 6.50359 4.55244 0 ]xsh49.1311 128.744 mo(1:Hadroniccontributionsto)[5.85309 11.1541 8.77489 5.85309 6.5036 4.55244 5.85309 6.5036 3.2518 10.451 5.20277 5.85309 6.1808 4.55244 4.55244 3.2518 6.50359 6.5036 4.55246 3.25179 5.85309 6.5036 9.86533 4.55244 0 ]xshPTEMEA+CMMI12*1 [11.955 0 0 -11.955 0 0 ]msf206.167 128.744 mo(a)shPTEMEB+CMMI8*1 [7.97 0 0 -7.97 0 0 ]msf212.312 130.538 mo(\026)shPTEMDZ+CMR12*1 [11.955 0 0 -11.955 0 0 ]msf217.904 128.744 mo(:hadronicvacuumpolarisation\(leftdiagram\),)[11.1541 6.5036 5.85309 6.5036 4.55246 5.85309 6.5036 3.25177 10.451 5.53278 5.85309 5.20276 6.5036 6.5036 15.0035 6.82639 5.85309 3.2518 5.85309 4.55246 3.2518 4.61703 5.85309 4.55243 3.2518 5.85309 11.7518 4.55243 3.25183 5.20276 3.57684 9.81268 6.5036 3.25177 5.84113 5.85309 4.55243 5.85309 9.75525 4.55243 0 ]xsh10.8741 143.19 mo(hadroniclight-by-lightscattering\(middle\),pion-polecontributiontohadroniclight-by-)[6.50359 5.8531 6.50359 4.55244 5.85309 6.50359 3.2518 9.94889 3.25179 3.2518 5.85309 6.1808 4.55244 3.90213 6.18079 6.17834 3.90213 3.2518 3.25179 5.85309 6.1808 9.29866 4.61702 5.20276 5.8531 4.55244 4.55243 5.20277 4.55244 3.2518 6.5036 10.6111 4.55244 9.75522 3.2518 6.5036 6.5036 3.25177 5.19086 4.55246 8.22501 6.5036 3.2518 5.85309 6.5036 3.90213 6.82639 5.85309 3.2518 9.96088 5.19077 5.85309 6.18091 4.55243 4.55246 3.2518 6.5036 6.5036 4.55243 3.2518 5.85309 11.2616 4.55246 10.5992 6.5036 5.85309 6.5036 4.55243 5.85309 6.5036 3.2518 9.96088 3.2518 3.2518 5.85309 6.16891 4.55243 3.90213 6.18082 6.17834 0 ]xsh10.8741 157.636 mo(lightscattering\(right\).Fulllineswithanarrowdenotemuons,wigglylinesphotons,the)[3.2518 3.25179 5.8531 6.18079 8.40198 4.61703 5.20276 5.8531 4.55244 4.55244 5.20277 4.55244 3.2518 6.5036 9.71452 4.55244 4.55244 3.25179 5.8531 6.1689 4.55244 4.55244 8.44022 6.67105 6.5036 3.2518 7.10123 3.2518 3.2518 6.50359 5.20277 8.47855 8.45457 3.25179 4.54047 10.365 5.85309 10.3531 5.85309 4.55246 4.55246 5.53027 12.3161 6.5036 5.20276 6.5036 5.85309 4.55246 9.05222 9.4324 6.5036 5.85309 6.5036 4.61703 7.11331 8.45456 3.2518 5.85309 5.85309 3.2518 10.0398 3.2518 3.23981 6.5036 5.20276 8.47858 6.5036 6.5036 5.85309 4.55243 5.85309 6.5036 4.61703 7.11322 4.55249 6.50354 0 ]xsh10.8741 172.082 mo(dashedlineapionandshadedblobsanon-pointlikehadronicsubstructure.)[6.50359 5.8531 4.61702 6.50359 5.20277 10.4009 3.2518 3.2518 6.50359 9.1121 9.75034 6.50359 3.2518 5.85309 10.4009 5.85309 6.5036 10.4129 4.617 6.5036 5.85309 6.5036 5.20276 10.4009 6.50359 3.2518 5.85309 6.5036 8.51436 9.76233 6.5036 5.84119 6.5036 3.9021 6.83829 5.85309 3.2518 6.16888 4.55246 3.2518 3.2518 5.85556 9.1001 6.5036 5.85309 6.5036 4.55243 5.85309 6.5036 3.2518 9.112 4.61703 6.50357 6.5036 4.61703 4.55243 4.55246 6.5036 5.20276 4.55243 6.5036 4.55246 5.20276 0 ]xsh%ADOBeginSubsetFont: HXCQMX+CMBX12 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginPTEMEC+CMBX12 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleft <1C60D8A8C9B766CA30C0E552C707A407856800BBD3F36B6DA2E838EEA41DF18C36A6E7CAABDCD07AE0B2EE0108B495D675FE7BDFB7489B75424D4A76FDCCA518F8323764FF79AEF1F842B7041594F5C32AF00A15A1D685C0F5BA94474186574236F206FE9CF62F90D0F92DB5AF> |-/parenright <1C60D8A8C9B766CA30C0E552C707A40785E8F9B659F5EA6C8C58C327B1DCEF801C1DE55C562A9F58DC2C0988C108F58047436CC8CF0B1748E2E6393B47EBA7E561CADB50B9C3D67E8356C0953FBB0677A6EDE87E6B651619ED9B8BE8E7D1C962BC43A8D4BC095B9ECB48B76AC2> |-/hyphen <1C60D8A8C9B724821A39B73B927F75636483A197F6862C210595DCBE4806> |-/colon <1C60D8A8C9B8327EE93800746928A34E21B011EA35238965365CB7B8B52E2A5C6BF9890CE7AB0F37FAAD9CEA3C739629705193D0C4FE8E67D203F4E21B06271D58A0AF35C9487994> |-/F <1C60D8A8C9B636759BC7B0ECB89EF1088C465DA317B3B7C628BE18DF435C067C075B2B1493044D34D188054371E9FE6C92AAD1893A7B0F7A5CACD8A56CDB650E9FCF0D07EFFDCC8CB5217B4368818F0F2237982B42E1E928B78140DB30D6467F669EA63710B45DB554D246C467A94F30F395F88FAEBE7F6644B1D9E63AEFD58227775122CA94648E> |-/O <1C60D8A8C9B681FFEB494A0474D4E3368DC2FC2DE1300CC58EA91B32184BAB3591131CC24F1AD228A4F34869333DC15183678A3FD98CC31F81C3F3BD7BC1A2EE53C831DD3E6DAFE4B050D9ADE4D97D0D21A51C6C6A5AE13F3D8633A9F71F2AFCCD64E4E9E8183E900CDDF0BBC574EBE091AA6E190FE4971279AF51361B21422E90> |-/W <1C60D8A8C9B08A951887A59ACA612464031D36929654C4988DD7B7FBDBC471E1700DD3DB19A9221F54464CC3C88F23EFA3F86240C833F35D1CEF39EB41865F2659BED9F8EA983B9941EAFE7C57CE1DAD15EF2B43075A29DAFFEDE92554CFD532B42783E2C65E137B658FADB2BEC4F7804FDAB6FE7E4C0F4517F7A974506B0B94A07BEFC2E2179BDA892DA7C30BE74FD97406A865D8BC7CC039C647364BFF1400DAD868610D37CCF774041A4DCD198120E46B10329492A1EC902CA5D8B345BA3D177F4ECE81483DA607D51092925D65A2E277952529556FDAA03DB967447C2D519EB60075D96A5EC5B7F1DFB661233F71B0036C68D927DADFB14959F1> |-/k <1C60D8A8C9B7CA6456928DC111B4C0721275AF2A62474AAF11B408BC42EE6DBECEAF7983C781BEB493221178937BD679C3F9736E6EDCA4E575634C6E93248639E6F3425F2944F3B35AE5C88241A1C5779123A78F74C64907014344D0C1289477468504B29C03C987203102BDE5E0BF2C47643635923B78086323B881CA48F304D4BEB1C952E2E1F00FA4917B1C32DB71A0EF1AB61208AE3557473E4F088CC40AE79F4FE41F9B6F24471941F6F56779A553986462090E5064CC9045541FC3C822DDBA3B15A5CFA55867AB8A8B09999E31D776D717C5F971FD927B50F6442605BC53DD7EF67784CD4995069D67EDE19039AF5FF257B6D86F6D> |-/w <1C60D8A8C9B6A1B24C48343957509884D3E4F9293B626703C11C95C8D0FEEC5E9545E6D1515F11A335EEB3DE0F520BF568AAD222E8205449135C3523B0953D834C57313F5F25BA686D63848F2E7F3AF8B3DE875E1D5D5CBF0F5C833B0947259406A21D988FA739D4F1A15C2C1F368354DE56A72CDF33ECA7D0D8064DCD0AB92FC62EB6ACFFF7243569DCCB25DFF1953EDBAA4032C8BD9271C01DE8E0CB89E14F3E5C12B8F9381EEC75A3283287C11E839B01386C1BE3315A2F12C374BBBEBB671DD5465808B753F54A866ED5A4D3BCD65A0269367878DE2FB4A983D7C49ACE6ADB6CF1CBB9BB0D458147CEB7C4F7B5D2001276E0454B5E9856F54704B4C3F6B21239B3> |-systemdict /gcheck known {setglobal} if end {end} ifendPTEMEC+CMBX12 /Encoding getdup 40 /parenleft putdup 41 /parenright putdup 45 /hyphen putdup 58 /colon putdup 70 /F putdup 79 /O putdup 87 /W putdup 107 /k putdup 119 /w putpop%ADOEndSubsetFont
/PTEMEC+CMBX12*1 [40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 11{/.notdef}rp /colon 11{/.notdef}rp /F 6{/.notdef}rp /M /.notdef /O 3{/.notdef}rp /S /T 2{/.notdef}rp /W 9{/.notdef}rp /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /.notdef /y 134{/.notdef}rp]PTEMEC+CMBX12 nfPTEMEC+CMBX12*1 [11.955 0 0 -11.955 0 0 ]msf28.4331 200.475 mo(OneparticulargoalistolifttheSMpredictiontoaqualitativelynewlevel:)[10.1007 7.47187 9.9502 7.47188 6.53825 5.49336 5.23032 3.73593 5.97751 7.47188 3.73593 6.52637 9.30698 6.7247 6.72467 6.53827 7.53757 3.73595 9.118 5.23032 10.5383 3.73593 3.73593 4.10901 9.03204 5.23032 7.47186 9.9502 7.47186 16.5588 7.47189 5.49335 6.13657 7.47189 3.73593 5.97751 5.23032 3.73593 6.72467 11.2855 5.23032 10.5263 10.3519 7.09775 7.47186 6.53827 3.73593 3.73593 5.23032 6.53824 5.23032 3.73593 6.72717 6.13657 3.73593 10.8995 7.47186 6.13657 13.5271 3.73596 6.13657 6.71515 6.1366 3.7359 0 ]xsh10.8741 214.921 mo(Forthepionpolecontributiontohadroniclight-by-lightscatteringwewill)[7.33078 6.72469 11.459 5.23032 7.47188 12.1021 7.47188 3.73593 6.72469 13.4375 7.84247 6.72469 3.73593 12.1021 5.97749 6.72469 7.10129 5.2303 5.49336 3.73595 7.47186 7.47188 5.23032 3.73593 6.72469 13.4374 5.23035 12.6783 7.47186 6.53827 7.47186 5.49335 6.7247 7.47189 3.7359 11.9431 3.73593 3.73593 6.7247 7.10129 5.23032 4.48312 7.10129 7.09775 4.48312 3.73593 3.73593 6.7247 7.08926 11.1958 5.30438 5.97751 6.53824 5.23032 5.23032 6.13657 5.49341 3.73593 7.47186 12.6903 9.34286 12.1021 9.71344 3.73596 3.7359 0 ]xsh10.8741 229.367 mo(replacethepresentmodel-dependentuncertaintyguessbyareliablemodel-)[5.49336 6.13657 7.47188 3.73593 6.53826 5.9775 11.3968 5.23032 7.47188 11.3848 7.47186 5.49336 6.13658 5.30437 6.13657 7.10127 10.4905 11.2078 7.09529 7.47186 6.13658 3.73593 4.48312 7.47188 6.13657 7.84247 6.13657 7.47186 7.47189 6.13657 7.10129 10.4785 7.47186 7.47186 5.97751 6.13657 5.49338 5.23029 6.53827 3.73593 7.10129 4.85974 12.3579 6.72467 7.47189 6.13657 5.30438 10.5526 7.10129 12.3579 11.7866 5.49335 6.13657 3.73593 3.73596 6.53824 7.47186 3.73596 11.3967 11.2078 7.09534 7.47189 6.13657 3.73596 0 ]xsh10.8741 243.813 mo(independentuncertaintyestimate.)[3.73594 7.47187 7.47188 6.13657 7.84247 6.13657 7.47188 7.47188 6.13657 7.10129 9.71344 7.47186 7.47188 5.97749 6.13658 5.49336 5.23032 6.53824 3.73595 7.10127 4.84772 11.5929 6.13657 5.30438 5.2303 3.73595 11.2078 6.53825 5.23032 6.13657 0 ]xshPTEMDZ+CMR12*1 [11.955 0 0 -11.955 0 0 ]msf28.4331 258.259 mo(Thetechniquesthathavebeenandwillbedevelopedforthisendeavorcanalsobe)[8.45457 6.50359 10.0087 4.55244 5.20277 4.87997 6.5036 6.50359 3.2518 6.17834 6.5036 5.20276 9.43495 4.55244 6.5036 5.85309 9.35826 6.50359 5.53041 5.85555 10.0087 6.82626 5.20279 5.20276 11.3215 5.85312 6.50357 11.3095 8.45456 3.2518 3.2518 8.06961 6.82639 10.0087 6.5036 5.20276 5.85556 5.20276 3.2518 5.85309 6.82639 5.20276 11.3214 3.57687 5.85309 9.35837 4.55243 6.5036 3.2518 9.43494 5.20279 6.5036 6.50357 5.20279 5.5303 5.84354 5.85309 9.37036 5.20276 5.85309 11.3095 5.85309 3.2518 4.617 10.6709 6.82642 0 ]xsh10.8741 272.704 mo(usedforhigh-statisticsstudiesofsymmetryviolatingprocessesandforthedetermination)[6.50359 4.61702 5.20277 9.98254 3.57687 5.85309 8.03129 6.5036 3.25179 5.8531 6.50359 3.90213 4.617 4.55246 5.85309 4.55244 3.25179 4.61703 4.55243 3.2518 5.20277 8.10786 4.617 4.55246 6.50359 6.5036 3.2518 5.20276 8.09596 5.85309 7.05582 4.61702 6.17834 9.75523 9.75519 5.20276 4.55243 4.55246 9.6572 6.17834 3.25177 5.85309 3.25183 5.85309 4.55243 3.2518 6.5036 9.332 6.5036 4.55246 6.17587 5.20276 5.20279 4.617 4.61703 5.20276 8.10785 5.85309 6.5036 9.98251 3.57687 5.85309 8.03128 4.55246 6.5036 8.6817 6.5036 5.20276 4.55243 5.20279 4.55243 9.75522 3.2518 6.5036 5.85309 4.55243 3.2518 5.85309 0 ]xsh10.8741 287.15 mo(ofSMparameters.)[5.85309 6.62542 6.50359 13.7626 6.5036 5.85309 4.55244 5.85309 9.7552 5.20277 4.55244 5.20276 4.55246 4.617 0 ]xshPTEMEC+CMBX12*1 [11.955 0 0 -11.955 0 0 ]msf108.433 287.15 mo(Withtheprojectproposedherewewillcontributetoabetter)[13.8917 3.73595 5.2303 10.9747 5.23032 7.47188 9.6274 7.47188 5.49336 7.47787 4.10898 6.1366 5.97748 8.72116 7.47186 5.49338 6.72467 7.84247 6.7247 5.30435 6.14859 10.9627 7.47189 6.13654 5.49338 9.63943 9.33081 9.6394 9.71344 3.73596 3.7359 7.22681 5.97748 6.7247 7.10129 5.23032 5.49335 3.73593 7.47189 7.47186 5.23032 9.63931 5.23032 10.2156 10.041 7.84247 6.13657 5.23032 5.23032 6.1366 0 ]xsh10.8741 301.596 mo(determinationofthelightquarkmassesandtorevisedupperlimitsfor\(or)[7.47188 6.13657 5.23031 6.13657 5.49336 11.2078 3.73594 7.47188 6.53825 5.2303 3.73595 6.72469 12.9114 6.72469 9.54849 5.23032 7.47186 11.5762 3.73596 3.73593 6.72467 7.1012 10.6699 7.09772 7.47189 6.53824 5.49338 12.5491 11.2078 6.53827 5.30435 5.30438 6.13657 10.7439 6.53827 7.47189 12.9115 5.23032 12.1642 5.49338 6.13657 7.09772 3.73593 5.30438 6.13657 12.9114 7.47189 7.47186 7.85446 6.1366 10.9329 3.73596 3.73593 11.2078 3.73596 5.23029 10.7439 4.10898 6.72467 10.9329 5.23029 6.72473 0 ]xsh10.8741 316.042 mo(theobservationof\)symmetryviolatinghadronicdecays.)[5.23031 7.47188 10.6197 6.72469 7.47187 5.30438 6.13657 5.49336 6.35655 6.53824 5.23032 3.73595 6.72469 11.955 6.72469 5.32835 9.71344 5.30437 7.09775 11.2078 11.2078 6.13657 5.23032 5.49335 11.5809 7.09775 3.73593 6.72467 3.73593 6.53827 5.23032 3.73593 7.47189 11.2078 7.47189 6.53824 7.47189 5.49335 6.7247 7.47186 3.73593 10.4606 7.47186 6.1366 5.97748 6.16769 7.09772 5.30438 0 ]xshgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/PTEMEA+CMMI12*1 uf/PTEMEA+CMMI12 uf/JBVAAA+CMMI12 uf/PTEMDZ+CMR12*1 uf/PTEMDZ+CMR12 uf/SJERMX+CMR12 uf/PTEMEF+CMMI12*1 uf/PTEMEF+CMMI12 uf/XDNQMX+CMMI12 uf/PTEMEC+CMBX12*1 uf/PTEMEC+CMBX12 uf/HXCQMX+CMBX12 uf/PTEMEB+CMMI8*1 uf/PTEMEB+CMMI8 uf/YUMQMX+CMMI8 uf/PTEMEH+Times-Roman*1 uf/PTEMEH+Times-Roman uf/CEAAAA+Times-Roman uf/PTEMED+CMMI12*1 uf/PTEMED+CMMI12 uf/PUGQMX+CMMI12 uf/PTEMEE+CMR17*1 uf/PTEMEE+CMR17 uf/EVKAAA+CMR17 uf/PTEMEG+Symbol*1 uf/PTEMEG+Symbol uf/CEAAAA+Symbol ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
